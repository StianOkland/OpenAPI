{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport globalAxios from 'axios';\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from \"./common\";\nimport { BASE_PATH, BaseAPI } from \"./base\";\nexport var OrderStatusEnum;\n\n(function (OrderStatusEnum) {\n  OrderStatusEnum[\"Placed\"] = \"placed\";\n  OrderStatusEnum[\"Approved\"] = \"approved\";\n  OrderStatusEnum[\"Delivered\"] = \"delivered\";\n})(OrderStatusEnum || (OrderStatusEnum = {}));\n\nexport var PetStatusEnum;\n\n(function (PetStatusEnum) {\n  PetStatusEnum[\"Available\"] = \"available\";\n  PetStatusEnum[\"Pending\"] = \"pending\";\n  PetStatusEnum[\"Sold\"] = \"sold\";\n})(PetStatusEnum || (PetStatusEnum = {}));\n\nexport var PetApiAxiosParamCreator = function PetApiAxiosParamCreator(configuration) {\n  return {\n    addPet: function addPet(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args = arguments;\n      return _regeneratorRuntime.async(function addPet$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              assertParamExists('addPet', 'body', body);\n              localVarPath = \"/pet\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 10:\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    deletePet: function deletePet(petId, apiKey) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function deletePet$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n              assertParamExists('deletePet', 'petId', petId);\n              localVarPath = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", encodeURIComponent(String(petId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'DELETE'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 10:\n              if (apiKey !== undefined && apiKey !== null) {\n                localVarHeaderParameter['api_key'] = String(apiKey);\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context2.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    findPetsByStatus: function findPetsByStatus(status) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args3 = arguments;\n      return _regeneratorRuntime.async(function findPetsByStatus$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              assertParamExists('findPetsByStatus', 'status', status);\n              localVarPath = \"/pet/findByStatus\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 10:\n              if (status) {\n                localVarQueryParameter['status'] = status;\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context3.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    findPetsByTags: function findPetsByTags(tags) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args4 = arguments;\n      return _regeneratorRuntime.async(function findPetsByTags$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              assertParamExists('findPetsByTags', 'tags', tags);\n              localVarPath = \"/pet/findByTags\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context4.next = 10;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 10:\n              if (tags) {\n                localVarQueryParameter['tags'] = tags;\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context4.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getPetById: function getPetById(petId) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function getPetById$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              assertParamExists('getPetById', 'petId', petId);\n              localVarPath = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", encodeURIComponent(String(petId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context5.next = 10;\n              return _regeneratorRuntime.awrap(setApiKeyToObject(localVarHeaderParameter, \"api_key\", configuration));\n\n            case 10:\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context5.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updatePet: function updatePet(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args6 = arguments;\n      return _regeneratorRuntime.async(function updatePet$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              assertParamExists('updatePet', 'body', body);\n              localVarPath = \"/pet\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'PUT'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context6.next = 10;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 10:\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context6.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 16:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updatePetWithForm: function updatePetWithForm(petId, name, status) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          localVarFormParams,\n          headersFromBaseOptions,\n          _args7 = arguments;\n      return _regeneratorRuntime.async(function updatePetWithForm$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : {};\n              assertParamExists('updatePetWithForm', 'petId', petId);\n              localVarPath = \"/pet/{petId}\".replace(\"{\" + \"petId\" + \"}\", encodeURIComponent(String(petId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarFormParams = new URLSearchParams();\n              _context7.next = 11;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 11:\n              if (name !== undefined) {\n                localVarFormParams.set('name', name);\n              }\n\n              if (status !== undefined) {\n                localVarFormParams.set('status', status);\n              }\n\n              localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = localVarFormParams.toString();\n              return _context7.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 19:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    uploadFile: function uploadFile(petId, additionalMetadata, file) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          localVarFormParams,\n          headersFromBaseOptions,\n          _args8 = arguments;\n      return _regeneratorRuntime.async(function uploadFile$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : {};\n              assertParamExists('uploadFile', 'petId', petId);\n              localVarPath = \"/pet/{petId}/uploadImage\".replace(\"{\" + \"petId\" + \"}\", encodeURIComponent(String(petId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n              _context8.next = 11;\n              return _regeneratorRuntime.awrap(setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration));\n\n            case 11:\n              if (additionalMetadata !== undefined) {\n                localVarFormParams.append('additionalMetadata', additionalMetadata);\n              }\n\n              if (file !== undefined) {\n                localVarFormParams.append('file', file);\n              }\n\n              localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = localVarFormParams;\n              return _context8.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var PetApiFp = function PetApiFp(configuration) {\n  var localVarAxiosParamCreator = PetApiAxiosParamCreator(configuration);\n  return {\n    addPet: function addPet(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function addPet$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.addPet(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context9.sent;\n              return _context9.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    deletePet: function deletePet(petId, apiKey, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function deletePet$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.deletePet(petId, apiKey, options));\n\n            case 2:\n              localVarAxiosArgs = _context10.sent;\n              return _context10.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    findPetsByStatus: function findPetsByStatus(status, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function findPetsByStatus$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.findPetsByStatus(status, options));\n\n            case 2:\n              localVarAxiosArgs = _context11.sent;\n              return _context11.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    findPetsByTags: function findPetsByTags(tags, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function findPetsByTags$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.findPetsByTags(tags, options));\n\n            case 2:\n              localVarAxiosArgs = _context12.sent;\n              return _context12.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getPetById: function getPetById(petId, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getPetById$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getPetById(petId, options));\n\n            case 2:\n              localVarAxiosArgs = _context13.sent;\n              return _context13.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updatePet: function updatePet(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function updatePet$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.updatePet(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context14.sent;\n              return _context14.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updatePetWithForm: function updatePetWithForm(petId, name, status, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function updatePetWithForm$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.updatePetWithForm(petId, name, status, options));\n\n            case 2:\n              localVarAxiosArgs = _context15.sent;\n              return _context15.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    uploadFile: function uploadFile(petId, additionalMetadata, file, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function uploadFile$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.uploadFile(petId, additionalMetadata, file, options));\n\n            case 2:\n              localVarAxiosArgs = _context16.sent;\n              return _context16.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var PetApiFactory = function PetApiFactory(configuration, basePath, axios) {\n  var localVarFp = PetApiFp(configuration);\n  return {\n    addPet: function addPet(body, options) {\n      return localVarFp.addPet(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    deletePet: function deletePet(petId, apiKey, options) {\n      return localVarFp.deletePet(petId, apiKey, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    findPetsByStatus: function findPetsByStatus(status, options) {\n      return localVarFp.findPetsByStatus(status, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    findPetsByTags: function findPetsByTags(tags, options) {\n      return localVarFp.findPetsByTags(tags, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getPetById: function getPetById(petId, options) {\n      return localVarFp.getPetById(petId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    updatePet: function updatePet(body, options) {\n      return localVarFp.updatePet(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    updatePetWithForm: function updatePetWithForm(petId, name, status, options) {\n      return localVarFp.updatePetWithForm(petId, name, status, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    uploadFile: function uploadFile(petId, additionalMetadata, file, options) {\n      return localVarFp.uploadFile(petId, additionalMetadata, file, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var PetApi = function (_BaseAPI) {\n  _inherits(PetApi, _BaseAPI);\n\n  var _super = _createSuper(PetApi);\n\n  function PetApi() {\n    _classCallCheck(this, PetApi);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PetApi, [{\n    key: \"addPet\",\n    value: function addPet(body, options) {\n      var _this = this;\n\n      return PetApiFp(this.configuration).addPet(body, options).then(function (request) {\n        return request(_this.axios, _this.basePath);\n      });\n    }\n  }, {\n    key: \"deletePet\",\n    value: function deletePet(petId, apiKey, options) {\n      var _this2 = this;\n\n      return PetApiFp(this.configuration).deletePet(petId, apiKey, options).then(function (request) {\n        return request(_this2.axios, _this2.basePath);\n      });\n    }\n  }, {\n    key: \"findPetsByStatus\",\n    value: function findPetsByStatus(status, options) {\n      var _this3 = this;\n\n      return PetApiFp(this.configuration).findPetsByStatus(status, options).then(function (request) {\n        return request(_this3.axios, _this3.basePath);\n      });\n    }\n  }, {\n    key: \"findPetsByTags\",\n    value: function findPetsByTags(tags, options) {\n      var _this4 = this;\n\n      return PetApiFp(this.configuration).findPetsByTags(tags, options).then(function (request) {\n        return request(_this4.axios, _this4.basePath);\n      });\n    }\n  }, {\n    key: \"getPetById\",\n    value: function getPetById(petId, options) {\n      var _this5 = this;\n\n      return PetApiFp(this.configuration).getPetById(petId, options).then(function (request) {\n        return request(_this5.axios, _this5.basePath);\n      });\n    }\n  }, {\n    key: \"updatePet\",\n    value: function updatePet(body, options) {\n      var _this6 = this;\n\n      return PetApiFp(this.configuration).updatePet(body, options).then(function (request) {\n        return request(_this6.axios, _this6.basePath);\n      });\n    }\n  }, {\n    key: \"updatePetWithForm\",\n    value: function updatePetWithForm(petId, name, status, options) {\n      var _this7 = this;\n\n      return PetApiFp(this.configuration).updatePetWithForm(petId, name, status, options).then(function (request) {\n        return request(_this7.axios, _this7.basePath);\n      });\n    }\n  }, {\n    key: \"uploadFile\",\n    value: function uploadFile(petId, additionalMetadata, file, options) {\n      var _this8 = this;\n\n      return PetApiFp(this.configuration).uploadFile(petId, additionalMetadata, file, options).then(function (request) {\n        return request(_this8.axios, _this8.basePath);\n      });\n    }\n  }]);\n\n  return PetApi;\n}(BaseAPI);\nexport var StoreApiAxiosParamCreator = function StoreApiAxiosParamCreator(configuration) {\n  return {\n    deleteOrder: function deleteOrder(orderId) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args17 = arguments;\n      return _regeneratorRuntime.async(function deleteOrder$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};\n              assertParamExists('deleteOrder', 'orderId', orderId);\n              localVarPath = \"/store/order/{orderId}\".replace(\"{\" + \"orderId\" + \"}\", encodeURIComponent(String(orderId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'DELETE'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context17.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getInventory: function getInventory() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args18 = arguments;\n      return _regeneratorRuntime.async(function getInventory$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              options = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n              localVarPath = \"/store/inventory\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              _context18.next = 9;\n              return _regeneratorRuntime.awrap(setApiKeyToObject(localVarHeaderParameter, \"api_key\", configuration));\n\n            case 9:\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context18.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 13:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getOrderById: function getOrderById(orderId) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args19 = arguments;\n      return _regeneratorRuntime.async(function getOrderById$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n              assertParamExists('getOrderById', 'orderId', orderId);\n              localVarPath = \"/store/order/{orderId}\".replace(\"{\" + \"orderId\" + \"}\", encodeURIComponent(String(orderId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context19.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    placeOrder: function placeOrder(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args20 = arguments;\n      return _regeneratorRuntime.async(function placeOrder$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              options = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};\n              assertParamExists('placeOrder', 'body', body);\n              localVarPath = \"/store/order\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context20.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var StoreApiFp = function StoreApiFp(configuration) {\n  var localVarAxiosParamCreator = StoreApiAxiosParamCreator(configuration);\n  return {\n    deleteOrder: function deleteOrder(orderId, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function deleteOrder$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.deleteOrder(orderId, options));\n\n            case 2:\n              localVarAxiosArgs = _context21.sent;\n              return _context21.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getInventory: function getInventory(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getInventory$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getInventory(options));\n\n            case 2:\n              localVarAxiosArgs = _context22.sent;\n              return _context22.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getOrderById: function getOrderById(orderId, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getOrderById$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getOrderById(orderId, options));\n\n            case 2:\n              localVarAxiosArgs = _context23.sent;\n              return _context23.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    placeOrder: function placeOrder(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function placeOrder$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.placeOrder(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context24.sent;\n              return _context24.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var StoreApiFactory = function StoreApiFactory(configuration, basePath, axios) {\n  var localVarFp = StoreApiFp(configuration);\n  return {\n    deleteOrder: function deleteOrder(orderId, options) {\n      return localVarFp.deleteOrder(orderId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getInventory: function getInventory(options) {\n      return localVarFp.getInventory(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getOrderById: function getOrderById(orderId, options) {\n      return localVarFp.getOrderById(orderId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    placeOrder: function placeOrder(body, options) {\n      return localVarFp.placeOrder(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var StoreApi = function (_BaseAPI2) {\n  _inherits(StoreApi, _BaseAPI2);\n\n  var _super2 = _createSuper(StoreApi);\n\n  function StoreApi() {\n    _classCallCheck(this, StoreApi);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(StoreApi, [{\n    key: \"deleteOrder\",\n    value: function deleteOrder(orderId, options) {\n      var _this9 = this;\n\n      return StoreApiFp(this.configuration).deleteOrder(orderId, options).then(function (request) {\n        return request(_this9.axios, _this9.basePath);\n      });\n    }\n  }, {\n    key: \"getInventory\",\n    value: function getInventory(options) {\n      var _this10 = this;\n\n      return StoreApiFp(this.configuration).getInventory(options).then(function (request) {\n        return request(_this10.axios, _this10.basePath);\n      });\n    }\n  }, {\n    key: \"getOrderById\",\n    value: function getOrderById(orderId, options) {\n      var _this11 = this;\n\n      return StoreApiFp(this.configuration).getOrderById(orderId, options).then(function (request) {\n        return request(_this11.axios, _this11.basePath);\n      });\n    }\n  }, {\n    key: \"placeOrder\",\n    value: function placeOrder(body, options) {\n      var _this12 = this;\n\n      return StoreApiFp(this.configuration).placeOrder(body, options).then(function (request) {\n        return request(_this12.axios, _this12.basePath);\n      });\n    }\n  }]);\n\n  return StoreApi;\n}(BaseAPI);\nexport var UserApiAxiosParamCreator = function UserApiAxiosParamCreator(configuration) {\n  return {\n    createUser: function createUser(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args25 = arguments;\n      return _regeneratorRuntime.async(function createUser$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              options = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};\n              assertParamExists('createUser', 'body', body);\n              localVarPath = \"/user\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context25.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    createUsersWithArrayInput: function createUsersWithArrayInput(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args26 = arguments;\n      return _regeneratorRuntime.async(function createUsersWithArrayInput$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              options = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};\n              assertParamExists('createUsersWithArrayInput', 'body', body);\n              localVarPath = \"/user/createWithArray\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context26.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    createUsersWithListInput: function createUsersWithListInput(body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args27 = arguments;\n      return _regeneratorRuntime.async(function createUsersWithListInput$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              options = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};\n              assertParamExists('createUsersWithListInput', 'body', body);\n              localVarPath = \"/user/createWithList\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context27.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    deleteUser: function deleteUser(username) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args28 = arguments;\n      return _regeneratorRuntime.async(function deleteUser$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              options = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};\n              assertParamExists('deleteUser', 'username', username);\n              localVarPath = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", encodeURIComponent(String(username)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'DELETE'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context28.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getUserByName: function getUserByName(username) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args29 = arguments;\n      return _regeneratorRuntime.async(function getUserByName$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              options = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : {};\n              assertParamExists('getUserByName', 'username', username);\n              localVarPath = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", encodeURIComponent(String(username)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context29.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    loginUser: function loginUser(username, password) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args30 = arguments;\n      return _regeneratorRuntime.async(function loginUser$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              options = _args30.length > 2 && _args30[2] !== undefined ? _args30[2] : {};\n              assertParamExists('loginUser', 'username', username);\n              assertParamExists('loginUser', 'password', password);\n              localVarPath = \"/user/login\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n\n              if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n              }\n\n              if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context30.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 15:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    logoutUser: function logoutUser() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args31 = arguments;\n      return _regeneratorRuntime.async(function logoutUser$(_context31) {\n        while (1) {\n          switch (_context31.prev = _context31.next) {\n            case 0:\n              options = _args31.length > 0 && _args31[0] !== undefined ? _args31[0] : {};\n              localVarPath = \"/user/logout\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context31.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context31.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updateUser: function updateUser(username, body) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args32 = arguments;\n      return _regeneratorRuntime.async(function updateUser$(_context32) {\n        while (1) {\n          switch (_context32.prev = _context32.next) {\n            case 0:\n              options = _args32.length > 2 && _args32[2] !== undefined ? _args32[2] : {};\n              assertParamExists('updateUser', 'username', username);\n              assertParamExists('updateUser', 'body', body);\n              localVarPath = \"/user/{username}\".replace(\"{\" + \"username\" + \"}\", encodeURIComponent(String(username)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'PUT'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);\n              return _context32.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 15:\n            case \"end\":\n              return _context32.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var UserApiFp = function UserApiFp(configuration) {\n  var localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);\n  return {\n    createUser: function createUser(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function createUser$(_context33) {\n        while (1) {\n          switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.createUser(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context33.sent;\n              return _context33.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context33.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    createUsersWithArrayInput: function createUsersWithArrayInput(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function createUsersWithArrayInput$(_context34) {\n        while (1) {\n          switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.createUsersWithArrayInput(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context34.sent;\n              return _context34.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context34.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    createUsersWithListInput: function createUsersWithListInput(body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function createUsersWithListInput$(_context35) {\n        while (1) {\n          switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.createUsersWithListInput(body, options));\n\n            case 2:\n              localVarAxiosArgs = _context35.sent;\n              return _context35.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context35.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    deleteUser: function deleteUser(username, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function deleteUser$(_context36) {\n        while (1) {\n          switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.deleteUser(username, options));\n\n            case 2:\n              localVarAxiosArgs = _context36.sent;\n              return _context36.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context36.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getUserByName: function getUserByName(username, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getUserByName$(_context37) {\n        while (1) {\n          switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getUserByName(username, options));\n\n            case 2:\n              localVarAxiosArgs = _context37.sent;\n              return _context37.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context37.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    loginUser: function loginUser(username, password, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function loginUser$(_context38) {\n        while (1) {\n          switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.loginUser(username, password, options));\n\n            case 2:\n              localVarAxiosArgs = _context38.sent;\n              return _context38.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context38.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    logoutUser: function logoutUser(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function logoutUser$(_context39) {\n        while (1) {\n          switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.logoutUser(options));\n\n            case 2:\n              localVarAxiosArgs = _context39.sent;\n              return _context39.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context39.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    updateUser: function updateUser(username, body, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function updateUser$(_context40) {\n        while (1) {\n          switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.updateUser(username, body, options));\n\n            case 2:\n              localVarAxiosArgs = _context40.sent;\n              return _context40.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context40.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var UserApiFactory = function UserApiFactory(configuration, basePath, axios) {\n  var localVarFp = UserApiFp(configuration);\n  return {\n    createUser: function createUser(body, options) {\n      return localVarFp.createUser(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    createUsersWithArrayInput: function createUsersWithArrayInput(body, options) {\n      return localVarFp.createUsersWithArrayInput(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    createUsersWithListInput: function createUsersWithListInput(body, options) {\n      return localVarFp.createUsersWithListInput(body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    deleteUser: function deleteUser(username, options) {\n      return localVarFp.deleteUser(username, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getUserByName: function getUserByName(username, options) {\n      return localVarFp.getUserByName(username, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    loginUser: function loginUser(username, password, options) {\n      return localVarFp.loginUser(username, password, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    logoutUser: function logoutUser(options) {\n      return localVarFp.logoutUser(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    updateUser: function updateUser(username, body, options) {\n      return localVarFp.updateUser(username, body, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var UserApi = function (_BaseAPI3) {\n  _inherits(UserApi, _BaseAPI3);\n\n  var _super3 = _createSuper(UserApi);\n\n  function UserApi() {\n    _classCallCheck(this, UserApi);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(UserApi, [{\n    key: \"createUser\",\n    value: function createUser(body, options) {\n      var _this13 = this;\n\n      return UserApiFp(this.configuration).createUser(body, options).then(function (request) {\n        return request(_this13.axios, _this13.basePath);\n      });\n    }\n  }, {\n    key: \"createUsersWithArrayInput\",\n    value: function createUsersWithArrayInput(body, options) {\n      var _this14 = this;\n\n      return UserApiFp(this.configuration).createUsersWithArrayInput(body, options).then(function (request) {\n        return request(_this14.axios, _this14.basePath);\n      });\n    }\n  }, {\n    key: \"createUsersWithListInput\",\n    value: function createUsersWithListInput(body, options) {\n      var _this15 = this;\n\n      return UserApiFp(this.configuration).createUsersWithListInput(body, options).then(function (request) {\n        return request(_this15.axios, _this15.basePath);\n      });\n    }\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(username, options) {\n      var _this16 = this;\n\n      return UserApiFp(this.configuration).deleteUser(username, options).then(function (request) {\n        return request(_this16.axios, _this16.basePath);\n      });\n    }\n  }, {\n    key: \"getUserByName\",\n    value: function getUserByName(username, options) {\n      var _this17 = this;\n\n      return UserApiFp(this.configuration).getUserByName(username, options).then(function (request) {\n        return request(_this17.axios, _this17.basePath);\n      });\n    }\n  }, {\n    key: \"loginUser\",\n    value: function loginUser(username, password, options) {\n      var _this18 = this;\n\n      return UserApiFp(this.configuration).loginUser(username, password, options).then(function (request) {\n        return request(_this18.axios, _this18.basePath);\n      });\n    }\n  }, {\n    key: \"logoutUser\",\n    value: function logoutUser(options) {\n      var _this19 = this;\n\n      return UserApiFp(this.configuration).logoutUser(options).then(function (request) {\n        return request(_this19.axios, _this19.basePath);\n      });\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(username, body, options) {\n      var _this20 = this;\n\n      return UserApiFp(this.configuration).updateUser(username, body, options).then(function (request) {\n        return request(_this20.axios, _this20.basePath);\n      });\n    }\n  }]);\n\n  return UserApi;\n}(BaseAPI);","map":{"version":3,"sources":["/home/stian/Documents/uninett_case/testdir/OpenAPIClient/generated/api.ts"],"names":["globalAxios","DUMMY_BASE_URL","assertParamExists","setApiKeyToObject","setOAuthToObject","setSearchParams","serializeDataIfNeeded","toPathString","createRequestFunction","BASE_PATH","BaseAPI","OrderStatusEnum","PetStatusEnum","PetApiAxiosParamCreator","configuration","addPet","body","options","localVarPath","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","data","url","deletePet","petId","apiKey","replace","encodeURIComponent","String","undefined","findPetsByStatus","status","findPetsByTags","tags","getPetById","updatePet","updatePetWithForm","name","localVarFormParams","URLSearchParams","set","toString","uploadFile","additionalMetadata","file","formDataCtor","FormData","append","PetApiFp","localVarAxiosParamCreator","localVarAxiosArgs","PetApiFactory","basePath","axios","localVarFp","then","request","PetApi","StoreApiAxiosParamCreator","deleteOrder","orderId","getInventory","getOrderById","placeOrder","StoreApiFp","StoreApiFactory","StoreApi","UserApiAxiosParamCreator","createUser","createUsersWithArrayInput","createUsersWithListInput","deleteUser","username","getUserByName","loginUser","password","logoutUser","updateUser","UserApiFp","UserApiFactory","UserApi"],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Swagger Petstore\n * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n *\n * The version of the OpenAPI document: 1.0.5\n * Contact: apiteam@swagger.io\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface ApiResponse\n */\nexport interface ApiResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof ApiResponse\n     */\n    code?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiResponse\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ApiResponse\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface Category\n */\nexport interface Category {\n    /**\n     * \n     * @type {number}\n     * @memberof Category\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Category\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface Order\n */\nexport interface Order {\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    id?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    petId?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Order\n     */\n    quantity?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Order\n     */\n    shipDate?: string;\n    /**\n     * Order Status\n     * @type {string}\n     * @memberof Order\n     */\n    status?: OrderStatusEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Order\n     */\n    complete?: boolean;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum OrderStatusEnum {\n    Placed = 'placed',\n    Approved = 'approved',\n    Delivered = 'delivered'\n}\n\n/**\n * \n * @export\n * @interface Pet\n */\nexport interface Pet {\n    /**\n     * \n     * @type {number}\n     * @memberof Pet\n     */\n    id?: number;\n    /**\n     * \n     * @type {Category}\n     * @memberof Pet\n     */\n    category?: Category;\n    /**\n     * \n     * @type {string}\n     * @memberof Pet\n     */\n    name: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Pet\n     */\n    photoUrls: Array<string>;\n    /**\n     * \n     * @type {Array<Tag>}\n     * @memberof Pet\n     */\n    tags?: Array<Tag>;\n    /**\n     * pet status in the store\n     * @type {string}\n     * @memberof Pet\n     */\n    status?: PetStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PetStatusEnum {\n    Available = 'available',\n    Pending = 'pending',\n    Sold = 'sold'\n}\n\n/**\n * \n * @export\n * @interface Tag\n */\nexport interface Tag {\n    /**\n     * \n     * @type {number}\n     * @memberof Tag\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Tag\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface User\n */\nexport interface User {\n    /**\n     * \n     * @type {number}\n     * @memberof User\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    lastName?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof User\n     */\n    phone?: string;\n    /**\n     * User Status\n     * @type {number}\n     * @memberof User\n     */\n    userStatus?: number;\n}\n\n/**\n * PetApi - axios parameter creator\n * @export\n */\nexport const PetApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPet: async (body: Pet, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('addPet', 'body', body)\n            const localVarPath = `/pet`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePet: async (petId: number, apiKey?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'petId' is not null or undefined\n            assertParamExists('deletePet', 'petId', petId)\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n            if (apiKey !== undefined && apiKey !== null) {\n                localVarHeaderParameter['api_key'] = String(apiKey);\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByStatus: async (status: Array<'available' | 'pending' | 'sold'>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'status' is not null or undefined\n            assertParamExists('findPetsByStatus', 'status', status)\n            const localVarPath = `/pet/findByStatus`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n            if (status) {\n                localVarQueryParameter['status'] = status;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        findPetsByTags: async (tags: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tags' is not null or undefined\n            assertParamExists('findPetsByTags', 'tags', tags)\n            const localVarPath = `/pet/findByTags`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n            if (tags) {\n                localVarQueryParameter['tags'] = tags;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPetById: async (petId: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'petId' is not null or undefined\n            assertParamExists('getPetById', 'petId', petId)\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key required\n            await setApiKeyToObject(localVarHeaderParameter, \"api_key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePet: async (body: Pet, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('updatePet', 'body', body)\n            const localVarPath = `/pet`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePetWithForm: async (petId: number, name?: string, status?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'petId' is not null or undefined\n            assertParamExists('updatePetWithForm', 'petId', petId)\n            const localVarPath = `/pet/{petId}`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new URLSearchParams();\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n\n            if (name !== undefined) { \n                localVarFormParams.set('name', name as any);\n            }\n    \n            if (status !== undefined) { \n                localVarFormParams.set('status', status as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams.toString();\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadFile: async (petId: number, additionalMetadata?: string, file?: any, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'petId' is not null or undefined\n            assertParamExists('uploadFile', 'petId', petId)\n            const localVarPath = `/pet/{petId}/uploadImage`\n                .replace(`{${\"petId\"}}`, encodeURIComponent(String(petId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n\n            // authentication petstore_auth required\n            // oauth required\n            await setOAuthToObject(localVarHeaderParameter, \"petstore_auth\", [\"write:pets\", \"read:pets\"], configuration)\n\n\n            if (additionalMetadata !== undefined) { \n                localVarFormParams.append('additionalMetadata', additionalMetadata as any);\n            }\n    \n            if (file !== undefined) { \n                localVarFormParams.append('file', file as any);\n            }\n    \n    \n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = localVarFormParams;\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PetApi - functional programming interface\n * @export\n */\nexport const PetApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PetApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async addPet(body: Pet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.addPet(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deletePet(petId: number, apiKey?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePet(petId, apiKey, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findPetsByStatus(status, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        async findPetsByTags(tags: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Pet>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.findPetsByTags(tags, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPetById(petId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pet>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPetById(petId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updatePet(body: Pet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePet(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updatePetWithForm(petId: number, name?: string, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePetWithForm(petId, name, status, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(petId, additionalMetadata, file, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PetApi - factory interface\n * @export\n */\nexport const PetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PetApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Add a new pet to the store\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPet(body: Pet, options?: any): AxiosPromise<void> {\n            return localVarFp.addPet(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a pet\n         * @param {number} petId Pet id to delete\n         * @param {string} [apiKey] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePet(petId: number, apiKey?: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deletePet(petId, apiKey, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Multiple status values can be provided with comma separated strings\n         * @summary Finds Pets by status\n         * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any): AxiosPromise<Array<Pet>> {\n            return localVarFp.findPetsByStatus(status, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n         * @summary Finds Pets by tags\n         * @param {Array<string>} tags Tags to filter by\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        findPetsByTags(tags: Array<string>, options?: any): AxiosPromise<Array<Pet>> {\n            return localVarFp.findPetsByTags(tags, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a single pet\n         * @summary Find pet by ID\n         * @param {number} petId ID of pet to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPetById(petId: number, options?: any): AxiosPromise<Pet> {\n            return localVarFp.getPetById(petId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an existing pet\n         * @param {Pet} body Pet object that needs to be added to the store\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePet(body: Pet, options?: any): AxiosPromise<void> {\n            return localVarFp.updatePet(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Updates a pet in the store with form data\n         * @param {number} petId ID of pet that needs to be updated\n         * @param {string} [name] Updated name of the pet\n         * @param {string} [status] Updated status of the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePetWithForm(petId: number, name?: string, status?: string, options?: any): AxiosPromise<void> {\n            return localVarFp.updatePetWithForm(petId, name, status, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary uploads an image\n         * @param {number} petId ID of pet to update\n         * @param {string} [additionalMetadata] Additional data to pass to server\n         * @param {any} [file] file to upload\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any): AxiosPromise<ApiResponse> {\n            return localVarFp.uploadFile(petId, additionalMetadata, file, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PetApi - object-oriented interface\n * @export\n * @class PetApi\n * @extends {BaseAPI}\n */\nexport class PetApi extends BaseAPI {\n    /**\n     * \n     * @summary Add a new pet to the store\n     * @param {Pet} body Pet object that needs to be added to the store\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public addPet(body: Pet, options?: any) {\n        return PetApiFp(this.configuration).addPet(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a pet\n     * @param {number} petId Pet id to delete\n     * @param {string} [apiKey] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public deletePet(petId: number, apiKey?: string, options?: any) {\n        return PetApiFp(this.configuration).deletePet(petId, apiKey, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Multiple status values can be provided with comma separated strings\n     * @summary Finds Pets by status\n     * @param {Array<'available' | 'pending' | 'sold'>} status Status values that need to be considered for filter\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public findPetsByStatus(status: Array<'available' | 'pending' | 'sold'>, options?: any) {\n        return PetApiFp(this.configuration).findPetsByStatus(status, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\n     * @summary Finds Pets by tags\n     * @param {Array<string>} tags Tags to filter by\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public findPetsByTags(tags: Array<string>, options?: any) {\n        return PetApiFp(this.configuration).findPetsByTags(tags, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a single pet\n     * @summary Find pet by ID\n     * @param {number} petId ID of pet to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public getPetById(petId: number, options?: any) {\n        return PetApiFp(this.configuration).getPetById(petId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an existing pet\n     * @param {Pet} body Pet object that needs to be added to the store\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public updatePet(body: Pet, options?: any) {\n        return PetApiFp(this.configuration).updatePet(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Updates a pet in the store with form data\n     * @param {number} petId ID of pet that needs to be updated\n     * @param {string} [name] Updated name of the pet\n     * @param {string} [status] Updated status of the pet\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public updatePetWithForm(petId: number, name?: string, status?: string, options?: any) {\n        return PetApiFp(this.configuration).updatePetWithForm(petId, name, status, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary uploads an image\n     * @param {number} petId ID of pet to update\n     * @param {string} [additionalMetadata] Additional data to pass to server\n     * @param {any} [file] file to upload\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PetApi\n     */\n    public uploadFile(petId: number, additionalMetadata?: string, file?: any, options?: any) {\n        return PetApiFp(this.configuration).uploadFile(petId, additionalMetadata, file, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * StoreApi - axios parameter creator\n * @export\n */\nexport const StoreApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOrder: async (orderId: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orderId' is not null or undefined\n            assertParamExists('deleteOrder', 'orderId', orderId)\n            const localVarPath = `/store/order/{orderId}`\n                .replace(`{${\"orderId\"}}`, encodeURIComponent(String(orderId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInventory: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/store/inventory`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication api_key required\n            await setApiKeyToObject(localVarHeaderParameter, \"api_key\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrderById: async (orderId: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orderId' is not null or undefined\n            assertParamExists('getOrderById', 'orderId', orderId)\n            const localVarPath = `/store/order/{orderId}`\n                .replace(`{${\"orderId\"}}`, encodeURIComponent(String(orderId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        placeOrder: async (body: Order, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('placeOrder', 'body', body)\n            const localVarPath = `/store/order`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * StoreApi - functional programming interface\n * @export\n */\nexport const StoreApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = StoreApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteOrder(orderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(orderId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getInventory(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: number; }>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getInventory(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrderById(orderId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderById(orderId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async placeOrder(body: Order, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.placeOrder(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * StoreApi - factory interface\n * @export\n */\nexport const StoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = StoreApiFp(configuration)\n    return {\n        /**\n         * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n         * @summary Delete purchase order by ID\n         * @param {number} orderId ID of the order that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteOrder(orderId: number, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteOrder(orderId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns a map of status codes to quantities\n         * @summary Returns pet inventories by status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getInventory(options?: any): AxiosPromise<{ [key: string]: number; }> {\n            return localVarFp.getInventory(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n         * @summary Find purchase order by ID\n         * @param {number} orderId ID of pet that needs to be fetched\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrderById(orderId: number, options?: any): AxiosPromise<Order> {\n            return localVarFp.getOrderById(orderId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Place an order for a pet\n         * @param {Order} body order placed for purchasing the pet\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        placeOrder(body: Order, options?: any): AxiosPromise<Order> {\n            return localVarFp.placeOrder(body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * StoreApi - object-oriented interface\n * @export\n * @class StoreApi\n * @extends {BaseAPI}\n */\nexport class StoreApi extends BaseAPI {\n    /**\n     * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\n     * @summary Delete purchase order by ID\n     * @param {number} orderId ID of the order that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public deleteOrder(orderId: number, options?: any) {\n        return StoreApiFp(this.configuration).deleteOrder(orderId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns a map of status codes to quantities\n     * @summary Returns pet inventories by status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public getInventory(options?: any) {\n        return StoreApiFp(this.configuration).getInventory(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\n     * @summary Find purchase order by ID\n     * @param {number} orderId ID of pet that needs to be fetched\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public getOrderById(orderId: number, options?: any) {\n        return StoreApiFp(this.configuration).getOrderById(orderId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Place an order for a pet\n     * @param {Order} body order placed for purchasing the pet\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StoreApi\n     */\n    public placeOrder(body: Order, options?: any) {\n        return StoreApiFp(this.configuration).placeOrder(body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * UserApi - axios parameter creator\n * @export\n */\nexport const UserApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser: async (body: User, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('createUser', 'body', body)\n            const localVarPath = `/user`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithArrayInput: async (body: Array<User>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('createUsersWithArrayInput', 'body', body)\n            const localVarPath = `/user/createWithArray`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithListInput: async (body: Array<User>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('createUsersWithListInput', 'body', body)\n            const localVarPath = `/user/createWithList`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser: async (username: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'username' is not null or undefined\n            assertParamExists('deleteUser', 'username', username)\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserByName: async (username: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'username' is not null or undefined\n            assertParamExists('getUserByName', 'username', username)\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUser: async (username: string, password: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'username' is not null or undefined\n            assertParamExists('loginUser', 'username', username)\n            // verify required parameter 'password' is not null or undefined\n            assertParamExists('loginUser', 'password', password)\n            const localVarPath = `/user/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (username !== undefined) {\n                localVarQueryParameter['username'] = username;\n            }\n\n            if (password !== undefined) {\n                localVarQueryParameter['password'] = password;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutUser: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/user/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser: async (username: string, body: User, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'username' is not null or undefined\n            assertParamExists('updateUser', 'username', username)\n            // verify required parameter 'body' is not null or undefined\n            assertParamExists('updateUser', 'body', body)\n            const localVarPath = `/user/{username}`\n                .replace(`{${\"username\"}}`, encodeURIComponent(String(username)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUser(body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUsersWithArrayInput(body: Array<User>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUsersWithArrayInput(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createUsersWithListInput(body: Array<User>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createUsersWithListInput(body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteUser(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(username, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUserByName(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByName(username, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async loginUser(username: string, password: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(username, password, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async logoutUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async updateUser(username: string, body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(username, body, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = UserApiFp(configuration)\n    return {\n        /**\n         * This can only be done by the logged in user.\n         * @summary Create user\n         * @param {User} body Created user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUser(body: User, options?: any): AxiosPromise<void> {\n            return localVarFp.createUser(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithArrayInput(body: Array<User>, options?: any): AxiosPromise<void> {\n            return localVarFp.createUsersWithArrayInput(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Creates list of users with given input array\n         * @param {Array<User>} body List of user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createUsersWithListInput(body: Array<User>, options?: any): AxiosPromise<void> {\n            return localVarFp.createUsersWithListInput(body, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Delete user\n         * @param {string} username The name that needs to be deleted\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteUser(username: string, options?: any): AxiosPromise<void> {\n            return localVarFp.deleteUser(username, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get user by user name\n         * @param {string} username The name that needs to be fetched. Use user1 for testing. \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUserByName(username: string, options?: any): AxiosPromise<User> {\n            return localVarFp.getUserByName(username, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Logs user into the system\n         * @param {string} username The user name for login\n         * @param {string} password The password for login in clear text\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginUser(username: string, password: string, options?: any): AxiosPromise<string> {\n            return localVarFp.loginUser(username, password, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Logs out current logged in user session\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logoutUser(options?: any): AxiosPromise<void> {\n            return localVarFp.logoutUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * This can only be done by the logged in user.\n         * @summary Updated user\n         * @param {string} username name that need to be updated\n         * @param {User} body Updated user object\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateUser(username: string, body: User, options?: any): AxiosPromise<void> {\n            return localVarFp.updateUser(username, body, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * This can only be done by the logged in user.\n     * @summary Create user\n     * @param {User} body Created user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUser(body: User, options?: any) {\n        return UserApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Creates list of users with given input array\n     * @param {Array<User>} body List of user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUsersWithArrayInput(body: Array<User>, options?: any) {\n        return UserApiFp(this.configuration).createUsersWithArrayInput(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Creates list of users with given input array\n     * @param {Array<User>} body List of user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public createUsersWithListInput(body: Array<User>, options?: any) {\n        return UserApiFp(this.configuration).createUsersWithListInput(body, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Delete user\n     * @param {string} username The name that needs to be deleted\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public deleteUser(username: string, options?: any) {\n        return UserApiFp(this.configuration).deleteUser(username, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get user by user name\n     * @param {string} username The name that needs to be fetched. Use user1 for testing. \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public getUserByName(username: string, options?: any) {\n        return UserApiFp(this.configuration).getUserByName(username, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Logs user into the system\n     * @param {string} username The user name for login\n     * @param {string} password The password for login in clear text\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public loginUser(username: string, password: string, options?: any) {\n        return UserApiFp(this.configuration).loginUser(username, password, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Logs out current logged in user session\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public logoutUser(options?: any) {\n        return UserApiFp(this.configuration).logoutUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * This can only be done by the logged in user.\n     * @summary Updated user\n     * @param {string} username name that need to be updated\n     * @param {User} body Updated user object\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public updateUser(username: string, body: User, options?: any) {\n        return UserApiFp(this.configuration).updateUser(username, body, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}