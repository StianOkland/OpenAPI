{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport globalAxios from 'axios';\nimport { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from \"./common\";\nimport { BASE_PATH, BaseAPI } from \"./base\";\nexport var EnhetApiAxiosParamCreator = function EnhetApiAxiosParamCreator(configuration) {\n  return {\n    getEnhet: function getEnhet(orgnr) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args = arguments;\n      return _regeneratorRuntime.async(function getEnhet$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              assertParamExists('getEnhet', 'orgnr', orgnr);\n              localVarPath = \"/v3/enhet/{orgnr}\".replace(\"{\" + \"orgnr\" + \"}\", encodeURIComponent(String(orgnr)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheter: function getEnheter(sidenummer, antallPerSide) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args2 = arguments;\n      return _regeneratorRuntime.async(function getEnheter$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n              localVarPath = \"/v3/enheter\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n\n              if (sidenummer !== undefined) {\n                localVarQueryParameter['sidenummer'] = sidenummer;\n              }\n\n              if (antallPerSide !== undefined) {\n                localVarQueryParameter['antallPerSide'] = antallPerSide;\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context2.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterEndretEtterDato: function getEnheterEndretEtterDato(dato) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args3 = arguments;\n      return _regeneratorRuntime.async(function getEnheterEndretEtterDato$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n              assertParamExists('getEnheterEndretEtterDato', 'dato', dato);\n              localVarPath = \"/v3/enheter/endretEtter\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n\n              if (dato !== undefined) {\n                localVarQueryParameter['dato'] = dato instanceof Date ? dato.toISOString() : dato;\n              }\n\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context3.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterInFylke: function getEnheterInFylke(fylkesnr) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args4 = arguments;\n      return _regeneratorRuntime.async(function getEnheterInFylke$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n              assertParamExists('getEnheterInFylke', 'fylkesnr', fylkesnr);\n              localVarPath = \"/v3/enheter/fylke/{fylkesnr}\".replace(\"{\" + \"fylkesnr\" + \"}\", encodeURIComponent(String(fylkesnr)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context4.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterInKommune: function getEnheterInKommune(kommunenr) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args5 = arguments;\n      return _regeneratorRuntime.async(function getEnheterInKommune$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n              assertParamExists('getEnheterInKommune', 'kommunenr', kommunenr);\n              localVarPath = \"/v3/enheter/kommune/{kommunenr}\".replace(\"{\" + \"kommunenr\" + \"}\", encodeURIComponent(String(kommunenr)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context5.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterWithNaeringskode: function getEnheterWithNaeringskode(naeringskode) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args6 = arguments;\n      return _regeneratorRuntime.async(function getEnheterWithNaeringskode$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              assertParamExists('getEnheterWithNaeringskode', 'naeringskode', naeringskode);\n              localVarPath = \"/v3/enheter/naeringskode/{naeringskode}\".replace(\"{\" + \"naeringskode\" + \"}\", encodeURIComponent(String(naeringskode)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context6.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterWithSkolekategori: function getEnheterWithSkolekategori(skolekategoriId) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args7 = arguments;\n      return _regeneratorRuntime.async(function getEnheterWithSkolekategori$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n              assertParamExists('getEnheterWithSkolekategori', 'skolekategoriId', skolekategoriId);\n              localVarPath = \"/v3/enheter/skolekategori/{skolekategoriId}\".replace(\"{\" + \"skolekategoriId\" + \"}\", encodeURIComponent(String(skolekategoriId)));\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context7.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    oppdaterEnheter: function oppdaterEnheter(model) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args8 = arguments;\n      return _regeneratorRuntime.async(function oppdaterEnheter$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n              assertParamExists('oppdaterEnheter', 'model', model);\n              localVarPath = \"/v3/enheter/oppdater\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration);\n              return _context8.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    sok: function sok(model) {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args9 = arguments;\n      return _regeneratorRuntime.async(function sok$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              assertParamExists('sok', 'model', model);\n              localVarPath = \"/v3/enheter/sok\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration);\n              return _context9.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var EnhetApiFp = function EnhetApiFp(configuration) {\n  var localVarAxiosParamCreator = EnhetApiAxiosParamCreator(configuration);\n  return {\n    getEnhet: function getEnhet(orgnr, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnhet$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnhet(orgnr, options));\n\n            case 2:\n              localVarAxiosArgs = _context10.sent;\n              return _context10.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheter: function getEnheter(sidenummer, antallPerSide, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheter$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheter(sidenummer, antallPerSide, options));\n\n            case 2:\n              localVarAxiosArgs = _context11.sent;\n              return _context11.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterEndretEtterDato: function getEnheterEndretEtterDato(dato, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheterEndretEtterDato$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheterEndretEtterDato(dato, options));\n\n            case 2:\n              localVarAxiosArgs = _context12.sent;\n              return _context12.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterInFylke: function getEnheterInFylke(fylkesnr, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheterInFylke$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheterInFylke(fylkesnr, options));\n\n            case 2:\n              localVarAxiosArgs = _context13.sent;\n              return _context13.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterInKommune: function getEnheterInKommune(kommunenr, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheterInKommune$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheterInKommune(kommunenr, options));\n\n            case 2:\n              localVarAxiosArgs = _context14.sent;\n              return _context14.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterWithNaeringskode: function getEnheterWithNaeringskode(naeringskode, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheterWithNaeringskode$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheterWithNaeringskode(naeringskode, options));\n\n            case 2:\n              localVarAxiosArgs = _context15.sent;\n              return _context15.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getEnheterWithSkolekategori: function getEnheterWithSkolekategori(skolekategoriId, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getEnheterWithSkolekategori$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getEnheterWithSkolekategori(skolekategoriId, options));\n\n            case 2:\n              localVarAxiosArgs = _context16.sent;\n              return _context16.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    oppdaterEnheter: function oppdaterEnheter(model, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function oppdaterEnheter$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.oppdaterEnheter(model, options));\n\n            case 2:\n              localVarAxiosArgs = _context17.sent;\n              return _context17.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    sok: function sok(model, options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function sok$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.sok(model, options));\n\n            case 2:\n              localVarAxiosArgs = _context18.sent;\n              return _context18.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var EnhetApiFactory = function EnhetApiFactory(configuration, basePath, axios) {\n  var localVarFp = EnhetApiFp(configuration);\n  return {\n    getEnhet: function getEnhet(orgnr, options) {\n      return localVarFp.getEnhet(orgnr, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheter: function getEnheter(sidenummer, antallPerSide, options) {\n      return localVarFp.getEnheter(sidenummer, antallPerSide, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheterEndretEtterDato: function getEnheterEndretEtterDato(dato, options) {\n      return localVarFp.getEnheterEndretEtterDato(dato, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheterInFylke: function getEnheterInFylke(fylkesnr, options) {\n      return localVarFp.getEnheterInFylke(fylkesnr, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheterInKommune: function getEnheterInKommune(kommunenr, options) {\n      return localVarFp.getEnheterInKommune(kommunenr, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheterWithNaeringskode: function getEnheterWithNaeringskode(naeringskode, options) {\n      return localVarFp.getEnheterWithNaeringskode(naeringskode, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getEnheterWithSkolekategori: function getEnheterWithSkolekategori(skolekategoriId, options) {\n      return localVarFp.getEnheterWithSkolekategori(skolekategoriId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    oppdaterEnheter: function oppdaterEnheter(model, options) {\n      return localVarFp.oppdaterEnheter(model, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    sok: function sok(model, options) {\n      return localVarFp.sok(model, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var EnhetApi = function (_BaseAPI) {\n  _inherits(EnhetApi, _BaseAPI);\n\n  var _super = _createSuper(EnhetApi);\n\n  function EnhetApi() {\n    _classCallCheck(this, EnhetApi);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EnhetApi, [{\n    key: \"getEnhet\",\n    value: function getEnhet(orgnr, options) {\n      var _this = this;\n\n      return EnhetApiFp(this.configuration).getEnhet(orgnr, options).then(function (request) {\n        return request(_this.axios, _this.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheter\",\n    value: function getEnheter(sidenummer, antallPerSide, options) {\n      var _this2 = this;\n\n      return EnhetApiFp(this.configuration).getEnheter(sidenummer, antallPerSide, options).then(function (request) {\n        return request(_this2.axios, _this2.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheterEndretEtterDato\",\n    value: function getEnheterEndretEtterDato(dato, options) {\n      var _this3 = this;\n\n      return EnhetApiFp(this.configuration).getEnheterEndretEtterDato(dato, options).then(function (request) {\n        return request(_this3.axios, _this3.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheterInFylke\",\n    value: function getEnheterInFylke(fylkesnr, options) {\n      var _this4 = this;\n\n      return EnhetApiFp(this.configuration).getEnheterInFylke(fylkesnr, options).then(function (request) {\n        return request(_this4.axios, _this4.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheterInKommune\",\n    value: function getEnheterInKommune(kommunenr, options) {\n      var _this5 = this;\n\n      return EnhetApiFp(this.configuration).getEnheterInKommune(kommunenr, options).then(function (request) {\n        return request(_this5.axios, _this5.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheterWithNaeringskode\",\n    value: function getEnheterWithNaeringskode(naeringskode, options) {\n      var _this6 = this;\n\n      return EnhetApiFp(this.configuration).getEnheterWithNaeringskode(naeringskode, options).then(function (request) {\n        return request(_this6.axios, _this6.basePath);\n      });\n    }\n  }, {\n    key: \"getEnheterWithSkolekategori\",\n    value: function getEnheterWithSkolekategori(skolekategoriId, options) {\n      var _this7 = this;\n\n      return EnhetApiFp(this.configuration).getEnheterWithSkolekategori(skolekategoriId, options).then(function (request) {\n        return request(_this7.axios, _this7.basePath);\n      });\n    }\n  }, {\n    key: \"oppdaterEnheter\",\n    value: function oppdaterEnheter(model, options) {\n      var _this8 = this;\n\n      return EnhetApiFp(this.configuration).oppdaterEnheter(model, options).then(function (request) {\n        return request(_this8.axios, _this8.basePath);\n      });\n    }\n  }, {\n    key: \"sok\",\n    value: function sok(model, options) {\n      var _this9 = this;\n\n      return EnhetApiFp(this.configuration).sok(model, options).then(function (request) {\n        return request(_this9.axios, _this9.basePath);\n      });\n    }\n  }]);\n\n  return EnhetApi;\n}(BaseAPI);\nexport var NaeringskodeApiAxiosParamCreator = function NaeringskodeApiAxiosParamCreator(configuration) {\n  return {\n    getNaeringskoder: function getNaeringskoder() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args19 = arguments;\n      return _regeneratorRuntime.async(function getNaeringskoder$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              options = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n              localVarPath = \"/v3/naeringskoder\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context19.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var NaeringskodeApiFp = function NaeringskodeApiFp(configuration) {\n  var localVarAxiosParamCreator = NaeringskodeApiAxiosParamCreator(configuration);\n  return {\n    getNaeringskoder: function getNaeringskoder(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getNaeringskoder$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getNaeringskoder(options));\n\n            case 2:\n              localVarAxiosArgs = _context20.sent;\n              return _context20.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var NaeringskodeApiFactory = function NaeringskodeApiFactory(configuration, basePath, axios) {\n  var localVarFp = NaeringskodeApiFp(configuration);\n  return {\n    getNaeringskoder: function getNaeringskoder(options) {\n      return localVarFp.getNaeringskoder(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var NaeringskodeApi = function (_BaseAPI2) {\n  _inherits(NaeringskodeApi, _BaseAPI2);\n\n  var _super2 = _createSuper(NaeringskodeApi);\n\n  function NaeringskodeApi() {\n    _classCallCheck(this, NaeringskodeApi);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(NaeringskodeApi, [{\n    key: \"getNaeringskoder\",\n    value: function getNaeringskoder(options) {\n      var _this10 = this;\n\n      return NaeringskodeApiFp(this.configuration).getNaeringskoder(options).then(function (request) {\n        return request(_this10.axios, _this10.basePath);\n      });\n    }\n  }]);\n\n  return NaeringskodeApi;\n}(BaseAPI);\nexport var TyperApiAxiosParamCreator = function TyperApiAxiosParamCreator(configuration) {\n  return {\n    getMaalformer: function getMaalformer() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args21 = arguments;\n      return _regeneratorRuntime.async(function getMaalformer$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              options = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};\n              localVarPath = \"/v3/maalformer\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context21.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getOrganisasjonsformer: function getOrganisasjonsformer() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args22 = arguments;\n      return _regeneratorRuntime.async(function getOrganisasjonsformer$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              options = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n              localVarPath = \"/v3/organisasjonsformer\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context22.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getRelasjoner: function getRelasjoner() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args23 = arguments;\n      return _regeneratorRuntime.async(function getRelasjoner$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              options = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n              localVarPath = \"/v3/relasjonstyper\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context23.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getSkolekategorier: function getSkolekategorier() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args24 = arguments;\n      return _regeneratorRuntime.async(function getSkolekategorier$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              options = _args24.length > 0 && _args24[0] !== undefined ? _args24[0] : {};\n              localVarPath = \"/v3/skolekategorier\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context24.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getUtgaattyper: function getUtgaattyper() {\n      var options,\n          localVarPath,\n          localVarUrlObj,\n          baseOptions,\n          localVarRequestOptions,\n          localVarHeaderParameter,\n          localVarQueryParameter,\n          headersFromBaseOptions,\n          _args25 = arguments;\n      return _regeneratorRuntime.async(function getUtgaattyper$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              options = _args25.length > 0 && _args25[0] !== undefined ? _args25[0] : {};\n              localVarPath = \"/v3/utgaattyper\";\n              localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n\n              localVarRequestOptions = _objectSpread(_objectSpread({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = _objectSpread(_objectSpread(_objectSpread({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context25.abrupt(\"return\", {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n\n            case 11:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var TyperApiFp = function TyperApiFp(configuration) {\n  var localVarAxiosParamCreator = TyperApiAxiosParamCreator(configuration);\n  return {\n    getMaalformer: function getMaalformer(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getMaalformer$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getMaalformer(options));\n\n            case 2:\n              localVarAxiosArgs = _context26.sent;\n              return _context26.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getOrganisasjonsformer: function getOrganisasjonsformer(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getOrganisasjonsformer$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getOrganisasjonsformer(options));\n\n            case 2:\n              localVarAxiosArgs = _context27.sent;\n              return _context27.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getRelasjoner: function getRelasjoner(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getRelasjoner$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getRelasjoner(options));\n\n            case 2:\n              localVarAxiosArgs = _context28.sent;\n              return _context28.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getSkolekategorier: function getSkolekategorier(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getSkolekategorier$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getSkolekategorier(options));\n\n            case 2:\n              localVarAxiosArgs = _context29.sent;\n              return _context29.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    getUtgaattyper: function getUtgaattyper(options) {\n      var localVarAxiosArgs;\n      return _regeneratorRuntime.async(function getUtgaattyper$(_context30) {\n        while (1) {\n          switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return _regeneratorRuntime.awrap(localVarAxiosParamCreator.getUtgaattyper(options));\n\n            case 2:\n              localVarAxiosArgs = _context30.sent;\n              return _context30.abrupt(\"return\", createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration));\n\n            case 4:\n            case \"end\":\n              return _context30.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  };\n};\nexport var TyperApiFactory = function TyperApiFactory(configuration, basePath, axios) {\n  var localVarFp = TyperApiFp(configuration);\n  return {\n    getMaalformer: function getMaalformer(options) {\n      return localVarFp.getMaalformer(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getOrganisasjonsformer: function getOrganisasjonsformer(options) {\n      return localVarFp.getOrganisasjonsformer(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getRelasjoner: function getRelasjoner(options) {\n      return localVarFp.getRelasjoner(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getSkolekategorier: function getSkolekategorier(options) {\n      return localVarFp.getSkolekategorier(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    getUtgaattyper: function getUtgaattyper(options) {\n      return localVarFp.getUtgaattyper(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\nexport var TyperApi = function (_BaseAPI3) {\n  _inherits(TyperApi, _BaseAPI3);\n\n  var _super3 = _createSuper(TyperApi);\n\n  function TyperApi() {\n    _classCallCheck(this, TyperApi);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(TyperApi, [{\n    key: \"getMaalformer\",\n    value: function getMaalformer(options) {\n      var _this11 = this;\n\n      return TyperApiFp(this.configuration).getMaalformer(options).then(function (request) {\n        return request(_this11.axios, _this11.basePath);\n      });\n    }\n  }, {\n    key: \"getOrganisasjonsformer\",\n    value: function getOrganisasjonsformer(options) {\n      var _this12 = this;\n\n      return TyperApiFp(this.configuration).getOrganisasjonsformer(options).then(function (request) {\n        return request(_this12.axios, _this12.basePath);\n      });\n    }\n  }, {\n    key: \"getRelasjoner\",\n    value: function getRelasjoner(options) {\n      var _this13 = this;\n\n      return TyperApiFp(this.configuration).getRelasjoner(options).then(function (request) {\n        return request(_this13.axios, _this13.basePath);\n      });\n    }\n  }, {\n    key: \"getSkolekategorier\",\n    value: function getSkolekategorier(options) {\n      var _this14 = this;\n\n      return TyperApiFp(this.configuration).getSkolekategorier(options).then(function (request) {\n        return request(_this14.axios, _this14.basePath);\n      });\n    }\n  }, {\n    key: \"getUtgaattyper\",\n    value: function getUtgaattyper(options) {\n      var _this15 = this;\n\n      return TyperApiFp(this.configuration).getUtgaattyper(options).then(function (request) {\n        return request(_this15.axios, _this15.basePath);\n      });\n    }\n  }]);\n\n  return TyperApi;\n}(BaseAPI);","map":{"version":3,"sources":["/home/stian/Documents/uninett_case/testdir/OpenAPIClient/generated/api.ts"],"names":["globalAxios","DUMMY_BASE_URL","assertParamExists","setSearchParams","serializeDataIfNeeded","toPathString","createRequestFunction","BASE_PATH","BaseAPI","EnhetApiAxiosParamCreator","configuration","getEnhet","orgnr","options","localVarPath","replace","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","headersFromBaseOptions","headers","url","getEnheter","sidenummer","antallPerSide","undefined","getEnheterEndretEtterDato","dato","Date","toISOString","getEnheterInFylke","fylkesnr","getEnheterInKommune","kommunenr","getEnheterWithNaeringskode","naeringskode","getEnheterWithSkolekategori","skolekategoriId","oppdaterEnheter","model","data","sok","EnhetApiFp","localVarAxiosParamCreator","localVarAxiosArgs","EnhetApiFactory","basePath","axios","localVarFp","then","request","EnhetApi","NaeringskodeApiAxiosParamCreator","getNaeringskoder","NaeringskodeApiFp","NaeringskodeApiFactory","NaeringskodeApi","TyperApiAxiosParamCreator","getMaalformer","getOrganisasjonsformer","getRelasjoner","getSkolekategorier","getUtgaattyper","TyperApiFp","TyperApiFactory","TyperApi"],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Nasjonalt api for skoler 3.0\n * Data importeres fra Brreg i tidsrommet 01:00-02:00.\n *\n * The version of the OpenAPI document: v3\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AdresseApiModel\n */\nexport interface AdresseApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof AdresseApiModel\n     */\n    Adresse?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AdresseApiModel\n     */\n    Postnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AdresseApiModel\n     */\n    Poststed?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AdresseApiModel\n     */\n    Land?: string;\n}\n/**\n * \n * @export\n * @interface ApiPageResultNsrEnhetTinyApiModel\n */\nexport interface ApiPageResultNsrEnhetTinyApiModel {\n    /**\n     * \n     * @type {number}\n     * @memberof ApiPageResultNsrEnhetTinyApiModel\n     */\n    Sidenummer?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiPageResultNsrEnhetTinyApiModel\n     */\n    AntallPerSide?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiPageResultNsrEnhetTinyApiModel\n     */\n    AntallSider?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ApiPageResultNsrEnhetTinyApiModel\n     */\n    TotaltAntallEnheter?: number;\n    /**\n     * \n     * @type {Array<NsrEnhetTinyApiModel>}\n     * @memberof ApiPageResultNsrEnhetTinyApiModel\n     */\n    Enheter?: Array<NsrEnhetTinyApiModel>;\n}\n/**\n * \n * @export\n * @interface BeliggenhetsadresseExternal\n */\nexport interface BeliggenhetsadresseExternal {\n    /**\n     * \n     * @type {string}\n     * @memberof BeliggenhetsadresseExternal\n     */\n    Adresse?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof BeliggenhetsadresseExternal\n     */\n    Postnr?: string;\n}\n/**\n * \n * @export\n * @interface EnhetExternal\n */\nexport interface EnhetExternal {\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetExternal\n     */\n    Orgnr: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetExternal\n     */\n    Navn: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetExternal\n     */\n    Epost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetExternal\n     */\n    Telefon?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetExternal\n     */\n    Mobil?: string;\n    /**\n     * \n     * @type {BeliggenhetsadresseExternal}\n     * @memberof EnhetExternal\n     */\n    Beliggenhetsadresse: BeliggenhetsadresseExternal;\n    /**\n     * \n     * @type {PostadresseExternal}\n     * @memberof EnhetExternal\n     */\n    Postadresse?: PostadresseExternal;\n}\n/**\n * \n * @export\n * @interface EnhetMinimumApiModel\n */\nexport interface EnhetMinimumApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetMinimumApiModel\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetMinimumApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface EnhetNaeringskodeApiModel\n */\nexport interface EnhetNaeringskodeApiModel {\n    /**\n     * \n     * @type {number}\n     * @memberof EnhetNaeringskodeApiModel\n     */\n    Prioritet?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EnhetNaeringskodeApiModel\n     */\n    ErHjelpeenhetskode?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetNaeringskodeApiModel\n     */\n    Kode?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetNaeringskodeApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetNaeringskodeApiModel\n     */\n    Versjon?: string;\n}\n/**\n * \n * @export\n * @interface EnhetUpdateResult\n */\nexport interface EnhetUpdateResult {\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetUpdateResult\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EnhetUpdateResult\n     */\n    Ok?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EnhetUpdateResult\n     */\n    Melding?: string;\n}\n/**\n * \n * @export\n * @interface FylkeApiModel\n */\nexport interface FylkeApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof FylkeApiModel\n     */\n    Fylkesnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FylkeApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FylkeApiModel\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FylkeApiModel\n     */\n    OrgnrStatsforvalter?: string;\n}\n/**\n * \n * @export\n * @interface KommuneApiModel\n */\nexport interface KommuneApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof KommuneApiModel\n     */\n    Kommunenr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KommuneApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KommuneApiModel\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KommuneApiModel\n     */\n    ErNedlagt?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KommuneApiModel\n     */\n    Fylkesnr?: string;\n    /**\n     * \n     * @type {KommunegruppeApiModel}\n     * @memberof KommuneApiModel\n     */\n    Kommunegruppe?: KommunegruppeApiModel;\n}\n/**\n * \n * @export\n * @interface KommunegruppeApiModel\n */\nexport interface KommunegruppeApiModel {\n    /**\n     * \n     * @type {number}\n     * @memberof KommunegruppeApiModel\n     */\n    Gruppe?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof KommunegruppeApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface KoordinatApiModel\n */\nexport interface KoordinatApiModel {\n    /**\n     * \n     * @type {number}\n     * @memberof KoordinatApiModel\n     */\n    Lengdegrad?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KoordinatApiModel\n     */\n    Breddegrad?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KoordinatApiModel\n     */\n    Zoom?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof KoordinatApiModel\n     */\n    GeoKilde?: string;\n}\n/**\n * \n * @export\n * @interface MaalformApiModel\n */\nexport interface MaalformApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof MaalformApiModel\n     */\n    Id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MaalformApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface NaeringskodeApiModel\n */\nexport interface NaeringskodeApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof NaeringskodeApiModel\n     */\n    Kode?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NaeringskodeApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NaeringskodeApiModel\n     */\n    Versjon?: string;\n}\n/**\n * \n * @export\n * @interface NsrEnhetApiModel\n */\nexport interface NsrEnhetApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Karakteristikk?: string;\n    /**\n     * \n     * @type {FylkeApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Fylke?: FylkeApiModel;\n    /**\n     * \n     * @type {KommuneApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Kommune?: KommuneApiModel;\n    /**\n     * \n     * @type {AdresseApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Beliggenhetsadresse?: AdresseApiModel;\n    /**\n     * \n     * @type {AdresseApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Postadresse?: AdresseApiModel;\n    /**\n     * \n     * @type {KoordinatApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Koordinat?: KoordinatApiModel;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Epost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Url?: string;\n    /**\n     * \n     * @type {MaalformApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Maalform?: MaalformApiModel;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Telefon?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Mobil?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    Fax?: string;\n    /**\n     * \n     * @type {OrganisasjonsformApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Organisasjonsform?: OrganisasjonsformApiModel;\n    /**\n     * \n     * @type {Array<EnhetNaeringskodeApiModel>}\n     * @memberof NsrEnhetApiModel\n     */\n    Naeringskoder?: Array<EnhetNaeringskodeApiModel>;\n    /**\n     * \n     * @type {UtgaattypeApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Utgaattype?: UtgaattypeApiModel;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErAktiv?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErSkoleeier?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErGrunnskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErPrivatskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErOffentligSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErVideregaaendeSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErSpesialskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetApiModel\n     */\n    ErGrunnopplaering?: boolean;\n    /**\n     * \n     * @type {PrivatskoleGodkjenningApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    PrivatskoleGodkjenning?: PrivatskoleGodkjenningApiModel;\n    /**\n     * \n     * @type {PersonApiModel}\n     * @memberof NsrEnhetApiModel\n     */\n    Skoleleder?: PersonApiModel;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    Elevtall?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    AnsatteFra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    AnsatteTil?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    SkoletrinnGSFra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    SkoletrinnGSTil?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    SkoletrinnVGSFra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof NsrEnhetApiModel\n     */\n    SkoletrinnVGSTil?: number;\n    /**\n     * \n     * @type {Array<SkolekategoriApiModel>}\n     * @memberof NsrEnhetApiModel\n     */\n    Skolekategorier?: Array<SkolekategoriApiModel>;\n    /**\n     * \n     * @type {Array<NsrRelasjonApiModel>}\n     * @memberof NsrEnhetApiModel\n     */\n    ForeldreRelasjoner?: Array<NsrRelasjonApiModel>;\n    /**\n     * \n     * @type {Array<NsrRelasjonApiModel>}\n     * @memberof NsrEnhetApiModel\n     */\n    BarnRelasjoner?: Array<NsrRelasjonApiModel>;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    DatoFoedt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetApiModel\n     */\n    DatoEndret?: string;\n}\n/**\n * \n * @export\n * @interface NsrEnhetTinyApiModel\n */\nexport interface NsrEnhetTinyApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    Orgnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    Navn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    Fylkesnr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    Kommunenr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    Epost?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErAktiv?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErSkoleeier?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErGrunnskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErVideregaaendeSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErPrivatskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErOffentligSkole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErSpesialskole?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    ErGrunnopplaering?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof NsrEnhetTinyApiModel\n     */\n    DatoEndret?: string;\n}\n/**\n * \n * @export\n * @interface NsrRelasjonApiModel\n */\nexport interface NsrRelasjonApiModel {\n    /**\n     * \n     * @type {EnhetMinimumApiModel}\n     * @memberof NsrRelasjonApiModel\n     */\n    Enhet?: EnhetMinimumApiModel;\n    /**\n     * \n     * @type {RelasjonstypeApiModel}\n     * @memberof NsrRelasjonApiModel\n     */\n    Relasjonstype?: RelasjonstypeApiModel;\n}\n/**\n * \n * @export\n * @interface OrganisasjonsformApiModel\n */\nexport interface OrganisasjonsformApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganisasjonsformApiModel\n     */\n    Id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganisasjonsformApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface PersonApiModel\n */\nexport interface PersonApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof PersonApiModel\n     */\n    Fornavn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonApiModel\n     */\n    Etternavn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonApiModel\n     */\n    Epost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PersonApiModel\n     */\n    Telefon?: string;\n}\n/**\n * \n * @export\n * @interface PostadresseExternal\n */\nexport interface PostadresseExternal {\n    /**\n     * \n     * @type {string}\n     * @memberof PostadresseExternal\n     */\n    Adresse?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PostadresseExternal\n     */\n    Postnr?: string;\n}\n/**\n * \n * @export\n * @interface PrivatskoleGodkjenningApiModel\n */\nexport interface PrivatskoleGodkjenningApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof PrivatskoleGodkjenningApiModel\n     */\n    Godkjenningslov?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PrivatskoleGodkjenningApiModel\n     */\n    GodkjentStatus?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PrivatskoleGodkjenningApiModel\n     */\n    GodkjentStatusTekst?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PrivatskoleGodkjenningApiModel\n     */\n    ErAktiv?: boolean;\n}\n/**\n * \n * @export\n * @interface RelasjonstypeApiModel\n */\nexport interface RelasjonstypeApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof RelasjonstypeApiModel\n     */\n    Id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelasjonstypeApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface SkolekategoriApiModel\n */\nexport interface SkolekategoriApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof SkolekategoriApiModel\n     */\n    Id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkolekategoriApiModel\n     */\n    Navn?: string;\n}\n/**\n * \n * @export\n * @interface SoekNsrApiModel\n */\nexport interface SoekNsrApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof SoekNsrApiModel\n     */\n    FritekstSoek?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoekNsrApiModel\n     */\n    Naeringskode?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoekNsrApiModel\n     */\n    SkolekategoriId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoekNsrApiModel\n     */\n    Fylkenr?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoekNsrApiModel\n     */\n    Kommunenr?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoekNsrApiModel\n     */\n    InkluderNedlagte?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoekNsrApiModel\n     */\n    InkluderAktive?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoekNsrApiModel\n     */\n    InkluderSkoler?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoekNsrApiModel\n     */\n    InkluderEiere?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoekNsrApiModel\n     */\n    InkluderAndreEnheter?: boolean;\n}\n/**\n * \n * @export\n * @interface UpdateEnheterPayload\n */\nexport interface UpdateEnheterPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateEnheterPayload\n     */\n    BrukernavnEksternt: string;\n    /**\n     * \n     * @type {Array<EnhetExternal>}\n     * @memberof UpdateEnheterPayload\n     */\n    Enheter?: Array<EnhetExternal>;\n}\n/**\n * \n * @export\n * @interface UtgaattypeApiModel\n */\nexport interface UtgaattypeApiModel {\n    /**\n     * \n     * @type {string}\n     * @memberof UtgaattypeApiModel\n     */\n    Id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UtgaattypeApiModel\n     */\n    Navn?: string;\n}\n\n/**\n * EnhetApi - axios parameter creator\n * @export\n */\nexport const EnhetApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returnerer en enhet basert på organisasjonsnummer.\n         * @summary En enhet\n         * @param {string} orgnr Organisasjonsnummer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnhet: async (orgnr: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgnr' is not null or undefined\n            assertParamExists('getEnhet', 'orgnr', orgnr)\n            const localVarPath = `/v3/enhet/{orgnr}`\n                .replace(`{${\"orgnr\"}}`, encodeURIComponent(String(orgnr)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.\n         * @summary Alle enheter\n         * @param {number} [sidenummer] Første side er nummer 1.\n         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheter: async (sidenummer?: number, antallPerSide?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/enheter`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (sidenummer !== undefined) {\n                localVarQueryParameter['sidenummer'] = sidenummer;\n            }\n\n            if (antallPerSide !== undefined) {\n                localVarQueryParameter['antallPerSide'] = antallPerSide;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00\n         * @summary Enheter endret\n         * @param {string} dato Enheter som er endret etter dato\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterEndretEtterDato: async (dato: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'dato' is not null or undefined\n            assertParamExists('getEnheterEndretEtterDato', 'dato', dato)\n            const localVarPath = `/v3/enheter/endretEtter`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (dato !== undefined) {\n                localVarQueryParameter['dato'] = (dato as any instanceof Date) ?\n                    (dato as any).toISOString() :\n                    dato;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter i fylke.\n         * @summary Alle enheter i fylke\n         * @param {string} fylkesnr Fylkesnr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterInFylke: async (fylkesnr: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'fylkesnr' is not null or undefined\n            assertParamExists('getEnheterInFylke', 'fylkesnr', fylkesnr)\n            const localVarPath = `/v3/enheter/fylke/{fylkesnr}`\n                .replace(`{${\"fylkesnr\"}}`, encodeURIComponent(String(fylkesnr)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter i kommune.\n         * @summary Alle enheter i kommune\n         * @param {string} kommunenr Kommunenr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterInKommune: async (kommunenr: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'kommunenr' is not null or undefined\n            assertParamExists('getEnheterInKommune', 'kommunenr', kommunenr)\n            const localVarPath = `/v3/enheter/kommune/{kommunenr}`\n                .replace(`{${\"kommunenr\"}}`, encodeURIComponent(String(kommunenr)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt næringskode.\n         * @summary Alle enheter med næringskode\n         * @param {string} naeringskode Naeringskode\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterWithNaeringskode: async (naeringskode: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'naeringskode' is not null or undefined\n            assertParamExists('getEnheterWithNaeringskode', 'naeringskode', naeringskode)\n            const localVarPath = `/v3/enheter/naeringskode/{naeringskode}`\n                .replace(`{${\"naeringskode\"}}`, encodeURIComponent(String(naeringskode)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt skolekategori.\n         * @summary Alle enheter med skolekategori\n         * @param {string} skolekategoriId SkolekategoriId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterWithSkolekategori: async (skolekategoriId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'skolekategoriId' is not null or undefined\n            assertParamExists('getEnheterWithSkolekategori', 'skolekategoriId', skolekategoriId)\n            const localVarPath = `/v3/enheter/skolekategori/{skolekategoriId}`\n                .replace(`{${\"skolekategoriId\"}}`, encodeURIComponent(String(skolekategoriId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.\n         * @summary Oppdaterer enheter\n         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        oppdaterEnheter: async (model: UpdateEnheterPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'model' is not null or undefined\n            assertParamExists('oppdaterEnheter', 'model', model)\n            const localVarPath = `/v3/enheter/oppdater`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \\\"InkluderAktive\\\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \\\"Fylkenr\\\": \\\"03\\\", \\\"InkluderNedlagte\\\": true, \\\"InkluderSkoler\\\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.\n         * @summary Søk i enheter\n         * @param {SoekNsrApiModel} model Søkekriterier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sok: async (model: SoekNsrApiModel, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'model' is not null or undefined\n            assertParamExists('sok', 'model', model)\n            const localVarPath = `/v3/enheter/sok`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EnhetApi - functional programming interface\n * @export\n */\nexport const EnhetApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EnhetApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returnerer en enhet basert på organisasjonsnummer.\n         * @summary En enhet\n         * @param {string} orgnr Organisasjonsnummer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnhet(orgnr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NsrEnhetApiModel>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnhet(orgnr, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.\n         * @summary Alle enheter\n         * @param {number} [sidenummer] Første side er nummer 1.\n         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheter(sidenummer?: number, antallPerSide?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiPageResultNsrEnhetTinyApiModel>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheter(sidenummer, antallPerSide, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00\n         * @summary Enheter endret\n         * @param {string} dato Enheter som er endret etter dato\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheterEndretEtterDato(dato: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterEndretEtterDato(dato, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter i fylke.\n         * @summary Alle enheter i fylke\n         * @param {string} fylkesnr Fylkesnr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheterInFylke(fylkesnr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterInFylke(fylkesnr, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter i kommune.\n         * @summary Alle enheter i kommune\n         * @param {string} kommunenr Kommunenr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheterInKommune(kommunenr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterInKommune(kommunenr, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt næringskode.\n         * @summary Alle enheter med næringskode\n         * @param {string} naeringskode Naeringskode\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheterWithNaeringskode(naeringskode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterWithNaeringskode(naeringskode, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt skolekategori.\n         * @summary Alle enheter med skolekategori\n         * @param {string} skolekategoriId SkolekategoriId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getEnheterWithSkolekategori(skolekategoriId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterWithSkolekategori(skolekategoriId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.\n         * @summary Oppdaterer enheter\n         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async oppdaterEnheter(model: UpdateEnheterPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnhetUpdateResult>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.oppdaterEnheter(model, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \\\"InkluderAktive\\\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \\\"Fylkenr\\\": \\\"03\\\", \\\"InkluderNedlagte\\\": true, \\\"InkluderSkoler\\\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.\n         * @summary Søk i enheter\n         * @param {SoekNsrApiModel} model Søkekriterier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async sok(model: SoekNsrApiModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.sok(model, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * EnhetApi - factory interface\n * @export\n */\nexport const EnhetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EnhetApiFp(configuration)\n    return {\n        /**\n         * Returnerer en enhet basert på organisasjonsnummer.\n         * @summary En enhet\n         * @param {string} orgnr Organisasjonsnummer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnhet(orgnr: string, options?: any): AxiosPromise<NsrEnhetApiModel> {\n            return localVarFp.getEnhet(orgnr, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.\n         * @summary Alle enheter\n         * @param {number} [sidenummer] Første side er nummer 1.\n         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheter(sidenummer?: number, antallPerSide?: number, options?: any): AxiosPromise<ApiPageResultNsrEnhetTinyApiModel> {\n            return localVarFp.getEnheter(sidenummer, antallPerSide, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00\n         * @summary Enheter endret\n         * @param {string} dato Enheter som er endret etter dato\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterEndretEtterDato(dato: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.getEnheterEndretEtterDato(dato, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter i fylke.\n         * @summary Alle enheter i fylke\n         * @param {string} fylkesnr Fylkesnr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterInFylke(fylkesnr: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.getEnheterInFylke(fylkesnr, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter i kommune.\n         * @summary Alle enheter i kommune\n         * @param {string} kommunenr Kommunenr\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterInKommune(kommunenr: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.getEnheterInKommune(kommunenr, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt næringskode.\n         * @summary Alle enheter med næringskode\n         * @param {string} naeringskode Naeringskode\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterWithNaeringskode(naeringskode: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.getEnheterWithNaeringskode(naeringskode, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle enheter som inneholder gitt skolekategori.\n         * @summary Alle enheter med skolekategori\n         * @param {string} skolekategoriId SkolekategoriId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getEnheterWithSkolekategori(skolekategoriId: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.getEnheterWithSkolekategori(skolekategoriId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.\n         * @summary Oppdaterer enheter\n         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        oppdaterEnheter(model: UpdateEnheterPayload, options?: any): AxiosPromise<Array<EnhetUpdateResult>> {\n            return localVarFp.oppdaterEnheter(model, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \\\"InkluderAktive\\\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \\\"Fylkenr\\\": \\\"03\\\", \\\"InkluderNedlagte\\\": true, \\\"InkluderSkoler\\\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.\n         * @summary Søk i enheter\n         * @param {SoekNsrApiModel} model Søkekriterier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sok(model: SoekNsrApiModel, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {\n            return localVarFp.sok(model, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EnhetApi - object-oriented interface\n * @export\n * @class EnhetApi\n * @extends {BaseAPI}\n */\nexport class EnhetApi extends BaseAPI {\n    /**\n     * Returnerer en enhet basert på organisasjonsnummer.\n     * @summary En enhet\n     * @param {string} orgnr Organisasjonsnummer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnhet(orgnr: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnhet(orgnr, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.\n     * @summary Alle enheter\n     * @param {number} [sidenummer] Første side er nummer 1.\n     * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheter(sidenummer?: number, antallPerSide?: number, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheter(sidenummer, antallPerSide, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00\n     * @summary Enheter endret\n     * @param {string} dato Enheter som er endret etter dato\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheterEndretEtterDato(dato: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheterEndretEtterDato(dato, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter i fylke.\n     * @summary Alle enheter i fylke\n     * @param {string} fylkesnr Fylkesnr\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheterInFylke(fylkesnr: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheterInFylke(fylkesnr, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter i kommune.\n     * @summary Alle enheter i kommune\n     * @param {string} kommunenr Kommunenr\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheterInKommune(kommunenr: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheterInKommune(kommunenr, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter som inneholder gitt næringskode.\n     * @summary Alle enheter med næringskode\n     * @param {string} naeringskode Naeringskode\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheterWithNaeringskode(naeringskode: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheterWithNaeringskode(naeringskode, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle enheter som inneholder gitt skolekategori.\n     * @summary Alle enheter med skolekategori\n     * @param {string} skolekategoriId SkolekategoriId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public getEnheterWithSkolekategori(skolekategoriId: string, options?: any) {\n        return EnhetApiFp(this.configuration).getEnheterWithSkolekategori(skolekategoriId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.\n     * @summary Oppdaterer enheter\n     * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public oppdaterEnheter(model: UpdateEnheterPayload, options?: any) {\n        return EnhetApiFp(this.configuration).oppdaterEnheter(model, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \\\"InkluderAktive\\\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \\\"Fylkenr\\\": \\\"03\\\", \\\"InkluderNedlagte\\\": true, \\\"InkluderSkoler\\\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.\n     * @summary Søk i enheter\n     * @param {SoekNsrApiModel} model Søkekriterier\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EnhetApi\n     */\n    public sok(model: SoekNsrApiModel, options?: any) {\n        return EnhetApiFp(this.configuration).sok(model, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * NaeringskodeApi - axios parameter creator\n * @export\n */\nexport const NaeringskodeApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returnerer alle næringskoder som tilhører undervisning.\n         * @summary Skole næringskoder\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNaeringskoder: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/naeringskoder`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * NaeringskodeApi - functional programming interface\n * @export\n */\nexport const NaeringskodeApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = NaeringskodeApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returnerer alle næringskoder som tilhører undervisning.\n         * @summary Skole næringskoder\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getNaeringskoder(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NaeringskodeApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getNaeringskoder(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * NaeringskodeApi - factory interface\n * @export\n */\nexport const NaeringskodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = NaeringskodeApiFp(configuration)\n    return {\n        /**\n         * Returnerer alle næringskoder som tilhører undervisning.\n         * @summary Skole næringskoder\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getNaeringskoder(options?: any): AxiosPromise<Array<NaeringskodeApiModel>> {\n            return localVarFp.getNaeringskoder(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * NaeringskodeApi - object-oriented interface\n * @export\n * @class NaeringskodeApi\n * @extends {BaseAPI}\n */\nexport class NaeringskodeApi extends BaseAPI {\n    /**\n     * Returnerer alle næringskoder som tilhører undervisning.\n     * @summary Skole næringskoder\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof NaeringskodeApi\n     */\n    public getNaeringskoder(options?: any) {\n        return NaeringskodeApiFp(this.configuration).getNaeringskoder(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * TyperApi - axios parameter creator\n * @export\n */\nexport const TyperApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Returnerer alle målformer.\n         * @summary Alle målformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaalformer: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/maalformer`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle organisasjonsformer.\n         * @summary Alle organisajonsformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrganisasjonsformer: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/organisasjonsformer`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle relasjonstyper for skoleregisteret.\n         * @summary Relasjonstyper for skoler\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRelasjoner: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/relasjonstyper`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle skolekategorier.\n         * @summary Alle skolekategorier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSkolekategorier: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/skolekategorier`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returnerer alle utgått-typer.\n         * @summary Alle utgått-typer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUtgaattyper: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/v3/utgaattyper`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * TyperApi - functional programming interface\n * @export\n */\nexport const TyperApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = TyperApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * Returnerer alle målformer.\n         * @summary Alle målformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMaalformer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MaalformApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaalformer(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle organisasjonsformer.\n         * @summary Alle organisajonsformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrganisasjonsformer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganisasjonsformApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganisasjonsformer(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle relasjonstyper for skoleregisteret.\n         * @summary Relasjonstyper for skoler\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRelasjoner(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelasjonstypeApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelasjoner(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle skolekategorier.\n         * @summary Alle skolekategorier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getSkolekategorier(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkolekategoriApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getSkolekategorier(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * Returnerer alle utgått-typer.\n         * @summary Alle utgått-typer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getUtgaattyper(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UtgaattypeApiModel>>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getUtgaattyper(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * TyperApi - factory interface\n * @export\n */\nexport const TyperApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = TyperApiFp(configuration)\n    return {\n        /**\n         * Returnerer alle målformer.\n         * @summary Alle målformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMaalformer(options?: any): AxiosPromise<Array<MaalformApiModel>> {\n            return localVarFp.getMaalformer(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle organisasjonsformer.\n         * @summary Alle organisajonsformer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrganisasjonsformer(options?: any): AxiosPromise<Array<OrganisasjonsformApiModel>> {\n            return localVarFp.getOrganisasjonsformer(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle relasjonstyper for skoleregisteret.\n         * @summary Relasjonstyper for skoler\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRelasjoner(options?: any): AxiosPromise<Array<RelasjonstypeApiModel>> {\n            return localVarFp.getRelasjoner(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle skolekategorier.\n         * @summary Alle skolekategorier\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getSkolekategorier(options?: any): AxiosPromise<Array<SkolekategoriApiModel>> {\n            return localVarFp.getSkolekategorier(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returnerer alle utgått-typer.\n         * @summary Alle utgått-typer\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getUtgaattyper(options?: any): AxiosPromise<Array<UtgaattypeApiModel>> {\n            return localVarFp.getUtgaattyper(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * TyperApi - object-oriented interface\n * @export\n * @class TyperApi\n * @extends {BaseAPI}\n */\nexport class TyperApi extends BaseAPI {\n    /**\n     * Returnerer alle målformer.\n     * @summary Alle målformer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TyperApi\n     */\n    public getMaalformer(options?: any) {\n        return TyperApiFp(this.configuration).getMaalformer(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle organisasjonsformer.\n     * @summary Alle organisajonsformer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TyperApi\n     */\n    public getOrganisasjonsformer(options?: any) {\n        return TyperApiFp(this.configuration).getOrganisasjonsformer(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle relasjonstyper for skoleregisteret.\n     * @summary Relasjonstyper for skoler\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TyperApi\n     */\n    public getRelasjoner(options?: any) {\n        return TyperApiFp(this.configuration).getRelasjoner(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle skolekategorier.\n     * @summary Alle skolekategorier\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TyperApi\n     */\n    public getSkolekategorier(options?: any) {\n        return TyperApiFp(this.configuration).getSkolekategorier(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returnerer alle utgått-typer.\n     * @summary Alle utgått-typer\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TyperApi\n     */\n    public getUtgaattyper(options?: any) {\n        return TyperApiFp(this.configuration).getUtgaattyper(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}