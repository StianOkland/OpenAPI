/* tslint:disable */
/* eslint-disable */
/**
 * Nasjonalt api for skoler 3.0
 * Data importeres fra Brreg i tidsrommet 01:00-02:00.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AdresseApiModel
 */
export interface AdresseApiModel {
    /**
     * 
     * @type {string}
     * @memberof AdresseApiModel
     */
    Adresse?: string;
    /**
     * 
     * @type {string}
     * @memberof AdresseApiModel
     */
    Postnr?: string;
    /**
     * 
     * @type {string}
     * @memberof AdresseApiModel
     */
    Poststed?: string;
    /**
     * 
     * @type {string}
     * @memberof AdresseApiModel
     */
    Land?: string;
}
/**
 * 
 * @export
 * @interface ApiPageResultNsrEnhetTinyApiModel
 */
export interface ApiPageResultNsrEnhetTinyApiModel {
    /**
     * 
     * @type {number}
     * @memberof ApiPageResultNsrEnhetTinyApiModel
     */
    Sidenummer?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiPageResultNsrEnhetTinyApiModel
     */
    AntallPerSide?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiPageResultNsrEnhetTinyApiModel
     */
    AntallSider?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiPageResultNsrEnhetTinyApiModel
     */
    TotaltAntallEnheter?: number;
    /**
     * 
     * @type {Array<NsrEnhetTinyApiModel>}
     * @memberof ApiPageResultNsrEnhetTinyApiModel
     */
    Enheter?: Array<NsrEnhetTinyApiModel>;
}
/**
 * 
 * @export
 * @interface BeliggenhetsadresseExternal
 */
export interface BeliggenhetsadresseExternal {
    /**
     * 
     * @type {string}
     * @memberof BeliggenhetsadresseExternal
     */
    Adresse?: string;
    /**
     * 
     * @type {string}
     * @memberof BeliggenhetsadresseExternal
     */
    Postnr?: string;
}
/**
 * 
 * @export
 * @interface EnhetExternal
 */
export interface EnhetExternal {
    /**
     * 
     * @type {string}
     * @memberof EnhetExternal
     */
    Orgnr: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetExternal
     */
    Navn: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetExternal
     */
    Epost?: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetExternal
     */
    Telefon?: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetExternal
     */
    Mobil?: string;
    /**
     * 
     * @type {BeliggenhetsadresseExternal}
     * @memberof EnhetExternal
     */
    Beliggenhetsadresse: BeliggenhetsadresseExternal;
    /**
     * 
     * @type {PostadresseExternal}
     * @memberof EnhetExternal
     */
    Postadresse?: PostadresseExternal;
}
/**
 * 
 * @export
 * @interface EnhetMinimumApiModel
 */
export interface EnhetMinimumApiModel {
    /**
     * 
     * @type {string}
     * @memberof EnhetMinimumApiModel
     */
    Orgnr?: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetMinimumApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface EnhetNaeringskodeApiModel
 */
export interface EnhetNaeringskodeApiModel {
    /**
     * 
     * @type {number}
     * @memberof EnhetNaeringskodeApiModel
     */
    Prioritet?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EnhetNaeringskodeApiModel
     */
    ErHjelpeenhetskode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnhetNaeringskodeApiModel
     */
    Kode?: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetNaeringskodeApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof EnhetNaeringskodeApiModel
     */
    Versjon?: string;
}
/**
 * 
 * @export
 * @interface EnhetUpdateResult
 */
export interface EnhetUpdateResult {
    /**
     * 
     * @type {string}
     * @memberof EnhetUpdateResult
     */
    Orgnr?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EnhetUpdateResult
     */
    Ok?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EnhetUpdateResult
     */
    Melding?: string;
}
/**
 * 
 * @export
 * @interface FylkeApiModel
 */
export interface FylkeApiModel {
    /**
     * 
     * @type {string}
     * @memberof FylkeApiModel
     */
    Fylkesnr?: string;
    /**
     * 
     * @type {string}
     * @memberof FylkeApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof FylkeApiModel
     */
    Orgnr?: string;
    /**
     * 
     * @type {string}
     * @memberof FylkeApiModel
     */
    OrgnrStatsforvalter?: string;
}
/**
 * 
 * @export
 * @interface KommuneApiModel
 */
export interface KommuneApiModel {
    /**
     * 
     * @type {string}
     * @memberof KommuneApiModel
     */
    Kommunenr?: string;
    /**
     * 
     * @type {string}
     * @memberof KommuneApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof KommuneApiModel
     */
    Orgnr?: string;
    /**
     * 
     * @type {boolean}
     * @memberof KommuneApiModel
     */
    ErNedlagt?: boolean;
    /**
     * 
     * @type {string}
     * @memberof KommuneApiModel
     */
    Fylkesnr?: string;
    /**
     * 
     * @type {KommunegruppeApiModel}
     * @memberof KommuneApiModel
     */
    Kommunegruppe?: KommunegruppeApiModel;
}
/**
 * 
 * @export
 * @interface KommunegruppeApiModel
 */
export interface KommunegruppeApiModel {
    /**
     * 
     * @type {number}
     * @memberof KommunegruppeApiModel
     */
    Gruppe?: number;
    /**
     * 
     * @type {string}
     * @memberof KommunegruppeApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface KoordinatApiModel
 */
export interface KoordinatApiModel {
    /**
     * 
     * @type {number}
     * @memberof KoordinatApiModel
     */
    Lengdegrad?: number;
    /**
     * 
     * @type {number}
     * @memberof KoordinatApiModel
     */
    Breddegrad?: number;
    /**
     * 
     * @type {number}
     * @memberof KoordinatApiModel
     */
    Zoom?: number;
    /**
     * 
     * @type {string}
     * @memberof KoordinatApiModel
     */
    GeoKilde?: string;
}
/**
 * 
 * @export
 * @interface MaalformApiModel
 */
export interface MaalformApiModel {
    /**
     * 
     * @type {string}
     * @memberof MaalformApiModel
     */
    Id?: string;
    /**
     * 
     * @type {string}
     * @memberof MaalformApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface NaeringskodeApiModel
 */
export interface NaeringskodeApiModel {
    /**
     * 
     * @type {string}
     * @memberof NaeringskodeApiModel
     */
    Kode?: string;
    /**
     * 
     * @type {string}
     * @memberof NaeringskodeApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof NaeringskodeApiModel
     */
    Versjon?: string;
}
/**
 * 
 * @export
 * @interface NsrEnhetApiModel
 */
export interface NsrEnhetApiModel {
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Orgnr?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Karakteristikk?: string;
    /**
     * 
     * @type {FylkeApiModel}
     * @memberof NsrEnhetApiModel
     */
    Fylke?: FylkeApiModel;
    /**
     * 
     * @type {KommuneApiModel}
     * @memberof NsrEnhetApiModel
     */
    Kommune?: KommuneApiModel;
    /**
     * 
     * @type {AdresseApiModel}
     * @memberof NsrEnhetApiModel
     */
    Beliggenhetsadresse?: AdresseApiModel;
    /**
     * 
     * @type {AdresseApiModel}
     * @memberof NsrEnhetApiModel
     */
    Postadresse?: AdresseApiModel;
    /**
     * 
     * @type {KoordinatApiModel}
     * @memberof NsrEnhetApiModel
     */
    Koordinat?: KoordinatApiModel;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Epost?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Url?: string;
    /**
     * 
     * @type {MaalformApiModel}
     * @memberof NsrEnhetApiModel
     */
    Maalform?: MaalformApiModel;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Telefon?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Mobil?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    Fax?: string;
    /**
     * 
     * @type {OrganisasjonsformApiModel}
     * @memberof NsrEnhetApiModel
     */
    Organisasjonsform?: OrganisasjonsformApiModel;
    /**
     * 
     * @type {Array<EnhetNaeringskodeApiModel>}
     * @memberof NsrEnhetApiModel
     */
    Naeringskoder?: Array<EnhetNaeringskodeApiModel>;
    /**
     * 
     * @type {UtgaattypeApiModel}
     * @memberof NsrEnhetApiModel
     */
    Utgaattype?: UtgaattypeApiModel;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErAktiv?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErSkoleeier?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErGrunnskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErPrivatskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErOffentligSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErVideregaaendeSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErSpesialskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetApiModel
     */
    ErGrunnopplaering?: boolean;
    /**
     * 
     * @type {PrivatskoleGodkjenningApiModel}
     * @memberof NsrEnhetApiModel
     */
    PrivatskoleGodkjenning?: PrivatskoleGodkjenningApiModel;
    /**
     * 
     * @type {PersonApiModel}
     * @memberof NsrEnhetApiModel
     */
    Skoleleder?: PersonApiModel;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    Elevtall?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    AnsatteFra?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    AnsatteTil?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    SkoletrinnGSFra?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    SkoletrinnGSTil?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    SkoletrinnVGSFra?: number;
    /**
     * 
     * @type {number}
     * @memberof NsrEnhetApiModel
     */
    SkoletrinnVGSTil?: number;
    /**
     * 
     * @type {Array<SkolekategoriApiModel>}
     * @memberof NsrEnhetApiModel
     */
    Skolekategorier?: Array<SkolekategoriApiModel>;
    /**
     * 
     * @type {Array<NsrRelasjonApiModel>}
     * @memberof NsrEnhetApiModel
     */
    ForeldreRelasjoner?: Array<NsrRelasjonApiModel>;
    /**
     * 
     * @type {Array<NsrRelasjonApiModel>}
     * @memberof NsrEnhetApiModel
     */
    BarnRelasjoner?: Array<NsrRelasjonApiModel>;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    DatoFoedt?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetApiModel
     */
    DatoEndret?: string;
}
/**
 * 
 * @export
 * @interface NsrEnhetTinyApiModel
 */
export interface NsrEnhetTinyApiModel {
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    Orgnr?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    Navn?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    Fylkesnr?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    Kommunenr?: string;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    Epost?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErAktiv?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErSkoleeier?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErGrunnskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErVideregaaendeSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErPrivatskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErOffentligSkole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErSpesialskole?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NsrEnhetTinyApiModel
     */
    ErGrunnopplaering?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NsrEnhetTinyApiModel
     */
    DatoEndret?: string;
}
/**
 * 
 * @export
 * @interface NsrRelasjonApiModel
 */
export interface NsrRelasjonApiModel {
    /**
     * 
     * @type {EnhetMinimumApiModel}
     * @memberof NsrRelasjonApiModel
     */
    Enhet?: EnhetMinimumApiModel;
    /**
     * 
     * @type {RelasjonstypeApiModel}
     * @memberof NsrRelasjonApiModel
     */
    Relasjonstype?: RelasjonstypeApiModel;
}
/**
 * 
 * @export
 * @interface OrganisasjonsformApiModel
 */
export interface OrganisasjonsformApiModel {
    /**
     * 
     * @type {string}
     * @memberof OrganisasjonsformApiModel
     */
    Id?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganisasjonsformApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface PersonApiModel
 */
export interface PersonApiModel {
    /**
     * 
     * @type {string}
     * @memberof PersonApiModel
     */
    Fornavn?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonApiModel
     */
    Etternavn?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonApiModel
     */
    Epost?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonApiModel
     */
    Telefon?: string;
}
/**
 * 
 * @export
 * @interface PostadresseExternal
 */
export interface PostadresseExternal {
    /**
     * 
     * @type {string}
     * @memberof PostadresseExternal
     */
    Adresse?: string;
    /**
     * 
     * @type {string}
     * @memberof PostadresseExternal
     */
    Postnr?: string;
}
/**
 * 
 * @export
 * @interface PrivatskoleGodkjenningApiModel
 */
export interface PrivatskoleGodkjenningApiModel {
    /**
     * 
     * @type {string}
     * @memberof PrivatskoleGodkjenningApiModel
     */
    Godkjenningslov?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivatskoleGodkjenningApiModel
     */
    GodkjentStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivatskoleGodkjenningApiModel
     */
    GodkjentStatusTekst?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PrivatskoleGodkjenningApiModel
     */
    ErAktiv?: boolean;
}
/**
 * 
 * @export
 * @interface RelasjonstypeApiModel
 */
export interface RelasjonstypeApiModel {
    /**
     * 
     * @type {string}
     * @memberof RelasjonstypeApiModel
     */
    Id?: string;
    /**
     * 
     * @type {string}
     * @memberof RelasjonstypeApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface SkolekategoriApiModel
 */
export interface SkolekategoriApiModel {
    /**
     * 
     * @type {string}
     * @memberof SkolekategoriApiModel
     */
    Id?: string;
    /**
     * 
     * @type {string}
     * @memberof SkolekategoriApiModel
     */
    Navn?: string;
}
/**
 * 
 * @export
 * @interface SoekNsrApiModel
 */
export interface SoekNsrApiModel {
    /**
     * 
     * @type {string}
     * @memberof SoekNsrApiModel
     */
    FritekstSoek?: string;
    /**
     * 
     * @type {string}
     * @memberof SoekNsrApiModel
     */
    Naeringskode?: string;
    /**
     * 
     * @type {string}
     * @memberof SoekNsrApiModel
     */
    SkolekategoriId?: string;
    /**
     * 
     * @type {string}
     * @memberof SoekNsrApiModel
     */
    Fylkenr?: string;
    /**
     * 
     * @type {string}
     * @memberof SoekNsrApiModel
     */
    Kommunenr?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SoekNsrApiModel
     */
    InkluderNedlagte?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SoekNsrApiModel
     */
    InkluderAktive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SoekNsrApiModel
     */
    InkluderSkoler?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SoekNsrApiModel
     */
    InkluderEiere?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SoekNsrApiModel
     */
    InkluderAndreEnheter?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateEnheterPayload
 */
export interface UpdateEnheterPayload {
    /**
     * 
     * @type {string}
     * @memberof UpdateEnheterPayload
     */
    BrukernavnEksternt: string;
    /**
     * 
     * @type {Array<EnhetExternal>}
     * @memberof UpdateEnheterPayload
     */
    Enheter?: Array<EnhetExternal>;
}
/**
 * 
 * @export
 * @interface UtgaattypeApiModel
 */
export interface UtgaattypeApiModel {
    /**
     * 
     * @type {string}
     * @memberof UtgaattypeApiModel
     */
    Id?: string;
    /**
     * 
     * @type {string}
     * @memberof UtgaattypeApiModel
     */
    Navn?: string;
}

/**
 * EnhetApi - axios parameter creator
 * @export
 */
export const EnhetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returnerer en enhet basert på organisasjonsnummer.
         * @summary En enhet
         * @param {string} orgnr Organisasjonsnummer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnhet: async (orgnr: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgnr' is not null or undefined
            assertParamExists('getEnhet', 'orgnr', orgnr)
            const localVarPath = `/v3/enhet/{orgnr}`
                .replace(`{${"orgnr"}}`, encodeURIComponent(String(orgnr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.
         * @summary Alle enheter
         * @param {number} [sidenummer] Første side er nummer 1.
         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheter: async (sidenummer?: number, antallPerSide?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/enheter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sidenummer !== undefined) {
                localVarQueryParameter['sidenummer'] = sidenummer;
            }

            if (antallPerSide !== undefined) {
                localVarQueryParameter['antallPerSide'] = antallPerSide;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00
         * @summary Enheter endret
         * @param {string} dato Enheter som er endret etter dato
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterEndretEtterDato: async (dato: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dato' is not null or undefined
            assertParamExists('getEnheterEndretEtterDato', 'dato', dato)
            const localVarPath = `/v3/enheter/endretEtter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dato !== undefined) {
                localVarQueryParameter['dato'] = (dato as any instanceof Date) ?
                    (dato as any).toISOString() :
                    dato;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter i fylke.
         * @summary Alle enheter i fylke
         * @param {string} fylkesnr Fylkesnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterInFylke: async (fylkesnr: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fylkesnr' is not null or undefined
            assertParamExists('getEnheterInFylke', 'fylkesnr', fylkesnr)
            const localVarPath = `/v3/enheter/fylke/{fylkesnr}`
                .replace(`{${"fylkesnr"}}`, encodeURIComponent(String(fylkesnr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter i kommune.
         * @summary Alle enheter i kommune
         * @param {string} kommunenr Kommunenr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterInKommune: async (kommunenr: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'kommunenr' is not null or undefined
            assertParamExists('getEnheterInKommune', 'kommunenr', kommunenr)
            const localVarPath = `/v3/enheter/kommune/{kommunenr}`
                .replace(`{${"kommunenr"}}`, encodeURIComponent(String(kommunenr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter som inneholder gitt næringskode.
         * @summary Alle enheter med næringskode
         * @param {string} naeringskode Naeringskode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterWithNaeringskode: async (naeringskode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'naeringskode' is not null or undefined
            assertParamExists('getEnheterWithNaeringskode', 'naeringskode', naeringskode)
            const localVarPath = `/v3/enheter/naeringskode/{naeringskode}`
                .replace(`{${"naeringskode"}}`, encodeURIComponent(String(naeringskode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle enheter som inneholder gitt skolekategori.
         * @summary Alle enheter med skolekategori
         * @param {string} skolekategoriId SkolekategoriId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterWithSkolekategori: async (skolekategoriId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'skolekategoriId' is not null or undefined
            assertParamExists('getEnheterWithSkolekategori', 'skolekategoriId', skolekategoriId)
            const localVarPath = `/v3/enheter/skolekategori/{skolekategoriId}`
                .replace(`{${"skolekategoriId"}}`, encodeURIComponent(String(skolekategoriId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.
         * @summary Oppdaterer enheter
         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oppdaterEnheter: async (model: UpdateEnheterPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('oppdaterEnheter', 'model', model)
            const localVarPath = `/v3/enheter/oppdater`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \"InkluderAktive\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \"Fylkenr\": \"03\", \"InkluderNedlagte\": true, \"InkluderSkoler\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.
         * @summary Søk i enheter
         * @param {SoekNsrApiModel} model Søkekriterier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sok: async (model: SoekNsrApiModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'model' is not null or undefined
            assertParamExists('sok', 'model', model)
            const localVarPath = `/v3/enheter/sok`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(model, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnhetApi - functional programming interface
 * @export
 */
export const EnhetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnhetApiAxiosParamCreator(configuration)
    return {
        /**
         * Returnerer en enhet basert på organisasjonsnummer.
         * @summary En enhet
         * @param {string} orgnr Organisasjonsnummer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnhet(orgnr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NsrEnhetApiModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnhet(orgnr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.
         * @summary Alle enheter
         * @param {number} [sidenummer] Første side er nummer 1.
         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheter(sidenummer?: number, antallPerSide?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiPageResultNsrEnhetTinyApiModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheter(sidenummer, antallPerSide, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00
         * @summary Enheter endret
         * @param {string} dato Enheter som er endret etter dato
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheterEndretEtterDato(dato: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterEndretEtterDato(dato, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter i fylke.
         * @summary Alle enheter i fylke
         * @param {string} fylkesnr Fylkesnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheterInFylke(fylkesnr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterInFylke(fylkesnr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter i kommune.
         * @summary Alle enheter i kommune
         * @param {string} kommunenr Kommunenr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheterInKommune(kommunenr: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterInKommune(kommunenr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter som inneholder gitt næringskode.
         * @summary Alle enheter med næringskode
         * @param {string} naeringskode Naeringskode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheterWithNaeringskode(naeringskode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterWithNaeringskode(naeringskode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle enheter som inneholder gitt skolekategori.
         * @summary Alle enheter med skolekategori
         * @param {string} skolekategoriId SkolekategoriId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnheterWithSkolekategori(skolekategoriId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnheterWithSkolekategori(skolekategoriId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.
         * @summary Oppdaterer enheter
         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oppdaterEnheter(model: UpdateEnheterPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EnhetUpdateResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oppdaterEnheter(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \"InkluderAktive\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \"Fylkenr\": \"03\", \"InkluderNedlagte\": true, \"InkluderSkoler\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.
         * @summary Søk i enheter
         * @param {SoekNsrApiModel} model Søkekriterier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sok(model: SoekNsrApiModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NsrEnhetTinyApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sok(model, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnhetApi - factory interface
 * @export
 */
export const EnhetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnhetApiFp(configuration)
    return {
        /**
         * Returnerer en enhet basert på organisasjonsnummer.
         * @summary En enhet
         * @param {string} orgnr Organisasjonsnummer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnhet(orgnr: string, options?: any): AxiosPromise<NsrEnhetApiModel> {
            return localVarFp.getEnhet(orgnr, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.
         * @summary Alle enheter
         * @param {number} [sidenummer] Første side er nummer 1.
         * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheter(sidenummer?: number, antallPerSide?: number, options?: any): AxiosPromise<ApiPageResultNsrEnhetTinyApiModel> {
            return localVarFp.getEnheter(sidenummer, antallPerSide, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00
         * @summary Enheter endret
         * @param {string} dato Enheter som er endret etter dato
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterEndretEtterDato(dato: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.getEnheterEndretEtterDato(dato, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter i fylke.
         * @summary Alle enheter i fylke
         * @param {string} fylkesnr Fylkesnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterInFylke(fylkesnr: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.getEnheterInFylke(fylkesnr, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter i kommune.
         * @summary Alle enheter i kommune
         * @param {string} kommunenr Kommunenr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterInKommune(kommunenr: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.getEnheterInKommune(kommunenr, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter som inneholder gitt næringskode.
         * @summary Alle enheter med næringskode
         * @param {string} naeringskode Naeringskode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterWithNaeringskode(naeringskode: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.getEnheterWithNaeringskode(naeringskode, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle enheter som inneholder gitt skolekategori.
         * @summary Alle enheter med skolekategori
         * @param {string} skolekategoriId SkolekategoriId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnheterWithSkolekategori(skolekategoriId: string, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.getEnheterWithSkolekategori(skolekategoriId, options).then((request) => request(axios, basePath));
        },
        /**
         * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.
         * @summary Oppdaterer enheter
         * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oppdaterEnheter(model: UpdateEnheterPayload, options?: any): AxiosPromise<Array<EnhetUpdateResult>> {
            return localVarFp.oppdaterEnheter(model, options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \"InkluderAktive\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \"Fylkenr\": \"03\", \"InkluderNedlagte\": true, \"InkluderSkoler\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.
         * @summary Søk i enheter
         * @param {SoekNsrApiModel} model Søkekriterier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sok(model: SoekNsrApiModel, options?: any): AxiosPromise<Array<NsrEnhetTinyApiModel>> {
            return localVarFp.sok(model, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnhetApi - object-oriented interface
 * @export
 * @class EnhetApi
 * @extends {BaseAPI}
 */
export class EnhetApi extends BaseAPI {
    /**
     * Returnerer en enhet basert på organisasjonsnummer.
     * @summary En enhet
     * @param {string} orgnr Organisasjonsnummer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnhet(orgnr: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnhet(orgnr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter i registeret.              Søkeresultatet er paginert med en standard sidestørrelse på 1000 enheter.
     * @summary Alle enheter
     * @param {number} [sidenummer] Første side er nummer 1.
     * @param {number} [antallPerSide] Antall enheter per side. Standard sidestørrelse er 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheter(sidenummer?: number, antallPerSide?: number, options?: any) {
        return EnhetApiFp(this.configuration).getEnheter(sidenummer, antallPerSide, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter i registeret det er registrert endringer på etter gitt dato.              Mange datoformater godtas, men kun norsk tidssone.<br />              Eksempler:<br />              2019.01.01<br />              2019-01-01 12:00:00<br />              2019-01-01T12:00:00<br />              2019-01-01%2012%3A00%3A00%2B01%3A00
     * @summary Enheter endret
     * @param {string} dato Enheter som er endret etter dato
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheterEndretEtterDato(dato: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnheterEndretEtterDato(dato, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter i fylke.
     * @summary Alle enheter i fylke
     * @param {string} fylkesnr Fylkesnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheterInFylke(fylkesnr: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnheterInFylke(fylkesnr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter i kommune.
     * @summary Alle enheter i kommune
     * @param {string} kommunenr Kommunenr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheterInKommune(kommunenr: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnheterInKommune(kommunenr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter som inneholder gitt næringskode.
     * @summary Alle enheter med næringskode
     * @param {string} naeringskode Naeringskode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheterWithNaeringskode(naeringskode: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnheterWithNaeringskode(naeringskode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle enheter som inneholder gitt skolekategori.
     * @summary Alle enheter med skolekategori
     * @param {string} skolekategoriId SkolekategoriId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public getEnheterWithSkolekategori(skolekategoriId: string, options?: any) {
        return EnhetApiFp(this.configuration).getEnheterWithSkolekategori(skolekategoriId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Oppdaterer enheter med:               - BrukernavnEksternt (Påkrevd. Brukernavnet i eksternt system som ber om å utføre endringenene.)                             Enheter:               - Orgnr (Påkrevd. Identifikator. Kan ikke endres.)               - Navn (Påkrevd. Kan ikke være null eller tom streng. Skal ikke navnet endres må samme navn sendes inn.)               - Epost (Valgfri. Kan være null, ingen endring. Tom streng fjerner epost.)               - Telefon (Valgfri. Kan være null, ingen endring. Tom streng fjerner telefon.)               - Mobil (Valgfri. Kan være null, ingen endring. Tom streng fjerner mobil.)               - Beliggenhetsadresse               -- Adresse (Påkrevd. Kan ikke være null eller tom streng.)               -- Postnummer (Påkrevd. Kan ikke være null eller tom streng.)               - Postadresse               -- Adresse (Valgfri. Kan være null, ingen endring. Tom streng fjerner adresse).               -- Postnummer (Valgfri. Kan være null, ingen endring. Tom streng fjerner postnummer).                             Merk at endringsønskene sendes til SSB og det kan ta 1-2 dager før NSR er oppdatert.                             Innlogging: Metoden krever brukernavn og passord. Basic authentication.
     * @summary Oppdaterer enheter
     * @param {UpdateEnheterPayload} model Data for enhet som skal oppdateres
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public oppdaterEnheter(model: UpdateEnheterPayload, options?: any) {
        return EnhetApiFp(this.configuration).oppdaterEnheter(model, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer enheter basert på søkekriterier. Requesten må inneholde et objekt som vist under.<br /><br />               Her kan du kombinere søkekriterier som søkestreng, næringskode, skolekategori, fylke og kommune samt filtrering på om du vil ha kun skoler,               skoleeiere eller andre enheter som f.eks organisasjonsledd. Du kan også filtrere på om du vil               ha aktive eller nedlagte enheter.               Ved behov om å ytterligere filtrering og funksjonalitet kan hele datagrunnlag for registere hentes i metoden /enheter.                             EGENSKAPER:               FritekstSoek - Begrens til enheter med organisasjonsnummer, navn eller karakteristikk               Naeringskode - Begrens til enheter med næringskode               SkolekategoriId - Begrens til enheter med skolekategori               Fylkenr - Begrens til enheter i fylke               Kommunenr - Begrens til enheter i kommune                             InkluderAktive - Enheter som er aktive               InkluderNedlagte - Enheter som ikke er aktive               InkluderAndreEnheter - Enheter som ikke er skoler eller skoleeiere               InkluderEiere - Enheter som eier en skole               InkluderSkoler - Enheter som er skole                             MERK:               En av egenskapene fritekstsøk, fylke, kommune, næringskode eller skolekategori må med for å få tilbake enheter.               Disse kan kombineres med de boolske egenskapene.               Eksempler:               Hvis du ønsker å ikke ha med utgåtte enheter legger du med \"InkluderAktive\": true               Hvis du ønsker kun nedlagte skoler i Oslo sender du med \"Fylkenr\": \"03\", \"InkluderNedlagte\": true, \"InkluderSkoler\": true               Hvis ingen boolske properties er angitt så er det, det samme som at alle står til true.
     * @summary Søk i enheter
     * @param {SoekNsrApiModel} model Søkekriterier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnhetApi
     */
    public sok(model: SoekNsrApiModel, options?: any) {
        return EnhetApiFp(this.configuration).sok(model, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NaeringskodeApi - axios parameter creator
 * @export
 */
export const NaeringskodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returnerer alle næringskoder som tilhører undervisning.
         * @summary Skole næringskoder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaeringskoder: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/naeringskoder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NaeringskodeApi - functional programming interface
 * @export
 */
export const NaeringskodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NaeringskodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returnerer alle næringskoder som tilhører undervisning.
         * @summary Skole næringskoder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNaeringskoder(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NaeringskodeApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNaeringskoder(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NaeringskodeApi - factory interface
 * @export
 */
export const NaeringskodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NaeringskodeApiFp(configuration)
    return {
        /**
         * Returnerer alle næringskoder som tilhører undervisning.
         * @summary Skole næringskoder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNaeringskoder(options?: any): AxiosPromise<Array<NaeringskodeApiModel>> {
            return localVarFp.getNaeringskoder(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NaeringskodeApi - object-oriented interface
 * @export
 * @class NaeringskodeApi
 * @extends {BaseAPI}
 */
export class NaeringskodeApi extends BaseAPI {
    /**
     * Returnerer alle næringskoder som tilhører undervisning.
     * @summary Skole næringskoder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NaeringskodeApi
     */
    public getNaeringskoder(options?: any) {
        return NaeringskodeApiFp(this.configuration).getNaeringskoder(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TyperApi - axios parameter creator
 * @export
 */
export const TyperApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returnerer alle målformer.
         * @summary Alle målformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaalformer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/maalformer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle organisasjonsformer.
         * @summary Alle organisajonsformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisasjonsformer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/organisasjonsformer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle relasjonstyper for skoleregisteret.
         * @summary Relasjonstyper for skoler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelasjoner: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/relasjonstyper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle skolekategorier.
         * @summary Alle skolekategorier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkolekategorier: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/skolekategorier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returnerer alle utgått-typer.
         * @summary Alle utgått-typer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtgaattyper: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3/utgaattyper`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TyperApi - functional programming interface
 * @export
 */
export const TyperApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TyperApiAxiosParamCreator(configuration)
    return {
        /**
         * Returnerer alle målformer.
         * @summary Alle målformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaalformer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MaalformApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaalformer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle organisasjonsformer.
         * @summary Alle organisajonsformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganisasjonsformer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganisasjonsformApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganisasjonsformer(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle relasjonstyper for skoleregisteret.
         * @summary Relasjonstyper for skoler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelasjoner(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RelasjonstypeApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRelasjoner(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle skolekategorier.
         * @summary Alle skolekategorier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSkolekategorier(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SkolekategoriApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSkolekategorier(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returnerer alle utgått-typer.
         * @summary Alle utgått-typer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUtgaattyper(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UtgaattypeApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUtgaattyper(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TyperApi - factory interface
 * @export
 */
export const TyperApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TyperApiFp(configuration)
    return {
        /**
         * Returnerer alle målformer.
         * @summary Alle målformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaalformer(options?: any): AxiosPromise<Array<MaalformApiModel>> {
            return localVarFp.getMaalformer(options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle organisasjonsformer.
         * @summary Alle organisajonsformer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganisasjonsformer(options?: any): AxiosPromise<Array<OrganisasjonsformApiModel>> {
            return localVarFp.getOrganisasjonsformer(options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle relasjonstyper for skoleregisteret.
         * @summary Relasjonstyper for skoler
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelasjoner(options?: any): AxiosPromise<Array<RelasjonstypeApiModel>> {
            return localVarFp.getRelasjoner(options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle skolekategorier.
         * @summary Alle skolekategorier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSkolekategorier(options?: any): AxiosPromise<Array<SkolekategoriApiModel>> {
            return localVarFp.getSkolekategorier(options).then((request) => request(axios, basePath));
        },
        /**
         * Returnerer alle utgått-typer.
         * @summary Alle utgått-typer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtgaattyper(options?: any): AxiosPromise<Array<UtgaattypeApiModel>> {
            return localVarFp.getUtgaattyper(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TyperApi - object-oriented interface
 * @export
 * @class TyperApi
 * @extends {BaseAPI}
 */
export class TyperApi extends BaseAPI {
    /**
     * Returnerer alle målformer.
     * @summary Alle målformer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TyperApi
     */
    public getMaalformer(options?: any) {
        return TyperApiFp(this.configuration).getMaalformer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle organisasjonsformer.
     * @summary Alle organisajonsformer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TyperApi
     */
    public getOrganisasjonsformer(options?: any) {
        return TyperApiFp(this.configuration).getOrganisasjonsformer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle relasjonstyper for skoleregisteret.
     * @summary Relasjonstyper for skoler
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TyperApi
     */
    public getRelasjoner(options?: any) {
        return TyperApiFp(this.configuration).getRelasjoner(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle skolekategorier.
     * @summary Alle skolekategorier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TyperApi
     */
    public getSkolekategorier(options?: any) {
        return TyperApiFp(this.configuration).getSkolekategorier(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returnerer alle utgått-typer.
     * @summary Alle utgått-typer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TyperApi
     */
    public getUtgaattyper(options?: any) {
        return TyperApiFp(this.configuration).getUtgaattyper(options).then((request) => request(this.axios, this.basePath));
    }
}


