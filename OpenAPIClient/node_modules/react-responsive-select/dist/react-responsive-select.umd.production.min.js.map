{"version":3,"file":"react-responsive-select.umd.production.min.js","sources":["../src/constants/actionTypes.ts","../src/lib/eventHandlers/handleAlphaNumerical.ts","../src/lib/isEqual.ts","../src/lib/onChangeBroadcasters/multiSelectBroadcastChange.ts","../src/lib/onChangeBroadcasters/singleSelectBroadcastChange.ts","../src/lib/containsClassName.ts","../src/lib/eventHandlers/handleClick.ts","../src/lib/nextValidIndex.ts","../src/lib/getNextIndex.ts","../src/lib/eventHandlers/handleKeyUpOrDownPressed.ts","../src/reducers/initialState.ts","../src/reducers/lib/addMultiSelectIndex.ts","../src/reducers/lib/addMultiSelectOption.ts","../src/reducers/lib/getInitialMultiSelectOption.ts","../src/reducers/lib/getMultiSelectInitialSelectedOptions.ts","../src/reducers/lib/getSingleSelectSelectedOption.ts","../src/reducers/lib/mergeIsAlteredState.ts","../src/reducers/lib/removeMultiSelectIndex.ts","../src/reducers/lib/removeMultiSelectOption.ts","../src/reducers/reducer.ts","../src/reducers/lib/getSelectedValueIndex.ts","../src/reducers/lib/getMultiSelectSelectedValueIndexes.ts","../src/reducers/lib/resetMultiSelectState.ts","../src/components/MultiSelectOption.tsx","../src/components/MultiSelect.tsx","../src/components/SingleSelectOption.tsx","../src/components/SingleSelect.tsx","../src/Extras.tsx","../src/react-responsive-select.tsx","../src/lib/preventDefaultForKeyCodes.ts","../src/lib/eventHandlers/handleKeyEvent.ts","../src/constants/keyCodes.ts","../src/lib/eventHandlers/handleEnterPressed.ts","../src/lib/eventHandlers/handleTouchStart.ts","../src/lib/eventHandlers/handleTouchMove.ts","../src/lib/eventHandlers/handleBlur.ts","../src/lib/getCustomLabelText.ts"],"sourcesContent":["export const INITIALISE = 'INITIALISE';\nexport const SET_IS_DRAGGING = 'SET_IS_DRAGGING';\nexport const SET_OPTIONS_PANEL_OPEN = 'SET_OPTIONS_PANEL_OPEN';\nexport const SET_OPTIONS_PANEL_CLOSED = 'SET_OPTIONS_PANEL_CLOSED';\nexport const SET_SINGLESELECT_OPTIONS = 'SET_SINGLESELECT_OPTIONS';\nexport const SET_MULTISELECT_OPTIONS = 'SET_MULTISELECT_OPTIONS';\nexport const SET_OPTIONS_PANEL_CLOSED_NO_SELECTION = 'SET_OPTIONS_PANEL_CLOSED_NO_SELECTION';\nexport const SET_OPTIONS_PANEL_CLOSED_ONBLUR = 'SET_OPTIONS_PANEL_CLOSED_ONBLUR';\nexport const SET_NEXT_SELECTED_INDEX = 'SET_NEXT_SELECTED_INDEX';\nexport const SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC = 'SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC';\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IOption, IState } from '../../types/';\n\ninterface IArgs {\n  event: KeyboardEvent;\n  state: IState;\n  RRSClassRef: Select;\n}\n\nlet stringMatch: string = '';\nlet timeoutActive: boolean;\n\n/**\n * User types some keys in quick successsion whilst focused on a select - search for this combonation in their options\n */\nexport function handleAlphaNumerical({ event, state, RRSClassRef }: IArgs): void {\n  const { options, disabled } = state;\n\n  if (disabled) return;\n\n  // Accumulate users key presses\n  stringMatch = stringMatch + event.key;\n\n  if (!timeoutActive) {\n    timeoutActive = true;\n\n    // Eventually (after 250ms) check if the accumulation of their keypresses matches the text of an option\n    setTimeout(() => {\n      const foundIndexes: number[] = options.reduce((acc: number[], option: IOption, index: number) => {\n        if (\n          !option.optHeader &&\n          !option.disabled &&\n          option.text &&\n          option.text.toLowerCase().indexOf(stringMatch) !== -1\n        ) {\n          acc.push(index);\n        }\n        return acc;\n      }, []);\n\n      if (foundIndexes.length > 0) {\n        RRSClassRef.updateState({\n          value: foundIndexes[0],\n          type: actionTypes.SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC,\n        });\n      }\n\n      // allow for the creation of a new search\n      timeoutActive = false;\n      stringMatch = '';\n    }, 250);\n  }\n}\n","const skipCircularReference = () => {\n  let cache: any[] = [];\n  return (_key: string, value: any) => {\n    if (typeof value === 'object' && value !== null) {\n      // Circular reference found\n      if (cache.indexOf(value) !== -1) return;\n      cache.push(value);\n    }\n    // No circular reference found\n    return value;\n  };\n};\n\nexport function isEqual(a: any, b: any): boolean {\n  return JSON.stringify(a, skipCircularReference()) === JSON.stringify(b, skipCircularReference());\n}\n","import { IOutputMultiSelect, IOutputMultiSelectOption } from '../../types/';\nimport { isEqual } from '../../lib/isEqual';\n\nexport function multiSelectBroadcastChange(\n  currOptions: IOutputMultiSelectOption[],\n  altered: boolean,\n  fn?: (changes: IOutputMultiSelect) => void,\n  prevOptions?: IOutputMultiSelectOption[]\n): void {\n  if (!fn) return;\n\n  const shouldBroadcastChange = !prevOptions || !isEqual(prevOptions.values, currOptions.values);\n\n  if (shouldBroadcastChange) {\n    fn({\n      options: currOptions.map((currOption: IOutputMultiSelectOption) => ({\n        name: currOption.name || '',\n        text: currOption.text || '',\n        value: currOption.value || '',\n      })),\n      altered,\n    });\n  }\n}\n","import { IOutputSingleSelect } from '../../types/';\nimport { isEqual } from '../../lib/isEqual';\n\nexport function singleSelectBroadcastChange(\n  currValue: IOutputSingleSelect,\n  altered?: boolean,\n  fn?: (changes: IOutputSingleSelect) => void,\n  prevValue?: IOutputSingleSelect\n): void {\n  if (!fn) return;\n\n  const shouldBroadcastChange = !isEqual(prevValue?.value, currValue?.value);\n\n  if (shouldBroadcastChange) {\n    fn({\n      name: currValue.name,\n      text: currValue.text,\n      value: currValue.value,\n      altered,\n    });\n  }\n}\n","export function containsClassName(element: HTMLElement, classNameStr: string): boolean {\n  return (\n    String(element.className)\n      .split(' ')\n      .indexOf(classNameStr) > -1\n  );\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { containsClassName } from '../containsClassName';\n\nimport { IState, IProps } from '../../types/';\n\ninterface TArgs {\n  event: MouseEvent | KeyboardEvent;\n  state: IState;\n  RRSClassRef: Select;\n  props: IProps;\n}\n\nexport function handleClick({ event, state, RRSClassRef, props }: TArgs): void {\n  const { multiselect, multiSelectSelectedOptions, isOptionsPanelOpen, isDragging, disabled, options } = state;\n\n  if (disabled) return;\n\n  if (isDragging === false) {\n    /* Disallow natural event flow - don't allow blur to happen from button focus to selected option focus */\n    event.preventDefault();\n\n    if (event && containsClassName(event.target as HTMLElement, 'rrs__options')) {\n      return;\n    }\n\n    const value = parseFloat((event.target as any).getAttribute('data-key'));\n\n    if (options[value] && (options[value].disabled === true || options[value].optHeader === true)) {\n      return;\n    }\n\n    /* Select option index, if user selected option */\n    if (containsClassName(event.target as HTMLElement, 'rrs__option')) {\n      if (multiselect) {\n        const isExistingSelection = multiSelectSelectedOptions.options.some(\n          option => options[value] && options[value].hasOwnProperty('value') && option.value === options[value].value\n        );\n\n        if (!isExistingSelection && props.onSelect) {\n          props.onSelect(options[value]);\n        } else if (isExistingSelection && props.onDeselect) {\n          props.onDeselect(options[value]);\n        }\n      } else if (!multiselect && props.onSelect) {\n        props.onSelect(options[value]);\n      }\n\n      RRSClassRef.updateState({\n        type: multiselect ? actionTypes.SET_MULTISELECT_OPTIONS : actionTypes.SET_SINGLESELECT_OPTIONS,\n        value,\n      });\n\n      return;\n    }\n\n    /*\n      When the options panel is open, treat clicking the label/select button\n      or the background overlay on small screen as a 'no action'\n    */\n    if (\n      isOptionsPanelOpen &&\n      // button on desktop (rrs__label) or overlay on small screen (rrs)\n      (containsClassName(event.target as HTMLElement, 'rrs__label') ||\n        containsClassName(event.target as HTMLElement, 'rrs'))\n    ) {\n      RRSClassRef.updateState(\n        {\n          type: actionTypes.SET_OPTIONS_PANEL_CLOSED_NO_SELECTION,\n        },\n        () => RRSClassRef.focusButton()\n      );\n\n      return;\n    }\n\n    /* Else user clicked close or open the options panel */\n    RRSClassRef.updateState(\n      {\n        type: isOptionsPanelOpen ? actionTypes.SET_OPTIONS_PANEL_CLOSED : actionTypes.SET_OPTIONS_PANEL_OPEN,\n      },\n      (newState: IState) => {\n        // After state update, check if focus should be moved to the button\n        if (newState.isOptionsPanelOpen === false) {\n          RRSClassRef.focusButton();\n        }\n      }\n    );\n  }\n}\n","import { IOption, IState } from '../types/';\n\nexport function nextValidIndex(\n  state: IState,\n  nextPotentialSelectionIndex: number,\n  mode: 'INCREMENT' | 'DECREMENT' = 'INCREMENT'\n): number {\n  const { options } = state;\n\n  const possibleOptionIndexes = options.reduce((acc: number[], option: IOption, index: number) => {\n    if (!option.optHeader) acc.push(index);\n    return acc;\n  }, []);\n\n  const indexNotFocusable = possibleOptionIndexes.indexOf(nextPotentialSelectionIndex) === -1;\n\n  if (indexNotFocusable && mode === 'INCREMENT') {\n    const nextSelectionPossible =\n      options[nextPotentialSelectionIndex + 1] && !options[nextPotentialSelectionIndex + 1].optHeader;\n\n    return nextSelectionPossible ? nextPotentialSelectionIndex + 1 : possibleOptionIndexes[0];\n  }\n\n  if (indexNotFocusable && mode === 'DECREMENT') {\n    const nextSelectionPossible =\n      options[nextPotentialSelectionIndex - 1] && !options[nextPotentialSelectionIndex - 1].optHeader;\n\n    return nextSelectionPossible\n      ? nextPotentialSelectionIndex - 1\n      : possibleOptionIndexes[possibleOptionIndexes.length - 1];\n  }\n\n  return nextPotentialSelectionIndex;\n}\n","import { IState } from '../types/';\nimport { nextValidIndex } from './nextValidIndex';\n\nexport function getNextIndex(mode: 'INCREMENT' | 'DECREMENT', state: IState): number {\n  const { isOptionsPanelOpen, nextPotentialSelectionIndex, options } = state;\n\n  switch (mode) {\n    case 'INCREMENT':\n      // Hold selection on current selected option when options panel first opens\n      if (isOptionsPanelOpen === false) {\n        return nextValidIndex(state, nextPotentialSelectionIndex, 'INCREMENT');\n      }\n\n      // User is at the end of the options so cycle back to start\n      if (nextPotentialSelectionIndex === options.length - 1) {\n        return nextValidIndex(state, 0, 'INCREMENT');\n      }\n\n      // Else increment\n      return nextValidIndex(state, nextPotentialSelectionIndex + 1, 'INCREMENT');\n\n    case 'DECREMENT':\n      // Hold selection on current selected option when options panel first opens\n      if (isOptionsPanelOpen === false) {\n        return nextValidIndex(state, nextPotentialSelectionIndex, 'DECREMENT');\n      }\n\n      // User is at start of the options so cycle around to end\n      if (nextPotentialSelectionIndex === 0) {\n        return nextValidIndex(state, options.length - 1, 'DECREMENT');\n      }\n\n      // Else decrement\n      return nextValidIndex(state, nextPotentialSelectionIndex - 1, 'DECREMENT');\n\n    default:\n      return nextValidIndex(state, 0, 'DECREMENT');\n  }\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IState } from '../../types/';\nimport { getNextIndex } from '../getNextIndex';\n\ninterface TArgs {\n  state: IState;\n  type: 'INCREMENT' | 'DECREMENT';\n  RRSClassRef: Select;\n}\n\nexport function handleKeyUpOrDownPressed({ state, RRSClassRef, type }: TArgs): void {\n  const { isOptionsPanelOpen, disabled } = state;\n\n  if (disabled) return;\n\n  RRSClassRef.updateState({\n    type: actionTypes.SET_NEXT_SELECTED_INDEX,\n    value: getNextIndex(type, state),\n  });\n\n  /* Open the options panel */\n  if (isOptionsPanelOpen === false) {\n    RRSClassRef.updateState({\n      type: actionTypes.SET_OPTIONS_PANEL_OPEN,\n    });\n  }\n}\n","export const initialState = {\n  // Constants\n  multiselect: false,\n\n  // Universal\n  name: '',\n  options: [],\n  isDragging: false,\n  isOptionsPanelOpen: false,\n  altered: false,\n\n  // Single select\n  singleSelectInitialIndex: 0,\n  singleSelectSelectedIndex: 0,\n  singleSelectSelectedOption: {},\n\n  // For determining highlighted item on Keyboard navigation\n  nextPotentialSelectionIndex: 0,\n\n  // Multi select\n  multiSelectInitialSelectedIndexes: [0],\n  multiSelectSelectedOptions: {\n    altered: false,\n    options: [],\n  },\n  multiSelectSelectedIndexes: [],\n};\n","import { IState } from '../../types/';\n\nexport function addMultiSelectIndex(state: IState, index: number): number[] {\n  return [...state.multiSelectSelectedIndexes, index];\n}\n","import { IOutputMultiSelect, IState } from '../../types/';\n\nexport function addMultiSelectOption(state: IState, index: number): IOutputMultiSelect {\n  return {\n    options: [\n      ...state.multiSelectSelectedOptions.options,\n      {\n        name: state.name,\n        text: state.options[index].text,\n        value: state.options[index].value,\n      },\n    ],\n  };\n}\n","import { IOption, IState } from '../../types/';\n\ninterface IOutputMultiSelectOptionSansDisabled {\n  value?: string;\n  text?: string;\n  name?: string;\n}\n\ninterface IFindClosestValidOptionOutput {\n  option: IOutputMultiSelectOptionSansDisabled;\n  index: number;\n}\n\nfunction findClosestValidOption(state: IState): { option: IOutputMultiSelectOptionSansDisabled; index: number } {\n  const { options, name } = state;\n  const possibleOptions = options.reduce((acc: IFindClosestValidOptionOutput[], option: IOption, index: number) => {\n    if (!option.optHeader) {\n      acc.push({\n        option: { value: option.value, text: option.text, name },\n        index,\n      });\n    }\n    return acc;\n  }, []);\n\n  // Note: Will fail if there is only one option, and it is an optHeader\n  return possibleOptions[0];\n}\n\nexport function getInitialMultiSelectOption(state: IState): IState {\n  //: { option: IOutputMultiSelectOptionSansDisabled; index: number; }\n  const { option, index } = findClosestValidOption(state);\n\n  return {\n    ...state,\n    multiSelectSelectedIndexes: [index],\n    multiSelectSelectedOptions: { options: [{ ...option }] },\n    nextPotentialSelectionIndex: index,\n  };\n}\n","import { IOption, IOutputMultiSelectOption, IState } from '../../types/';\n\n/* Use existing state.singleSelectSelectedOption, or first possible option to use as a selection */\nfunction findClosestValidOption(state: IState): IOutputMultiSelectOption {\n  const { multiSelectSelectedOptions, options, name } = state;\n\n  if (multiSelectSelectedOptions && multiSelectSelectedOptions.options.length) {\n    return multiSelectSelectedOptions.options[0];\n  }\n\n  const possibleOptions = options.reduce((acc: IOption[], option: IOption) => {\n    if (!option.optHeader) acc.push(option);\n    return acc;\n  }, []);\n\n  // Note: Will fail if no non-optHeader options exist\n  return {\n    name,\n    text: possibleOptions[0].text,\n    value: possibleOptions[0].value,\n  };\n}\n\nexport function getMultiSelectInitialSelectedOptions(\n  state: IState,\n  selectedValues?: string[]\n): IOutputMultiSelectOption[] {\n  const { noSelectionLabel, options, name } = state;\n\n  let selectedOptionsToReturn;\n\n  if (!noSelectionLabel) {\n    // Preselect the first item in the list when if no noSelectionLabel exists\n    if (selectedValues && selectedValues.length > 0) {\n      // Grab selected options by matching option.value with selectedValues, and merge in `name`\n      selectedOptionsToReturn = options\n        .filter((option: IOption) => selectedValues.some((selectedValue: string) => selectedValue === option.value))\n        .map((option: IOption) => ({ name, ...option }));\n    } else {\n      // Grab first option and merge in `name`\n      const option = options[0] && options[0].optHeader ? findClosestValidOption(state) : options[0];\n\n      selectedOptionsToReturn = [\n        {\n          name,\n          text: option.text,\n          value: option.value,\n        },\n      ];\n    }\n\n    return selectedOptionsToReturn;\n  }\n\n  selectedOptionsToReturn =\n    selectedValues && selectedValues.length > 0\n      ? options.reduce((acc: any[], option: IOption) => {\n          if (selectedValues.some((selectedValue: string) => selectedValue === option.value)) {\n            acc.push({ ...option });\n          }\n          return acc;\n        }, [])\n      : [\n          {\n            name: state.name,\n            text: noSelectionLabel,\n            value: 'null',\n          },\n        ];\n\n  return selectedOptionsToReturn;\n}\n","import { IOption, IState } from '../../types/';\n\n/*\n  use existing state.singleSelectSelectedOption, or first possible option to use as a selection\n*/\nfunction closestValidOption(state: IState): IOption & { name?: string } {\n  if (state.singleSelectSelectedOption) {\n    return state.singleSelectSelectedOption;\n  }\n\n  const possibleOptions: IOption[] = state.options.reduce((acc: IOption[], option: IOption): IOption[] => {\n    if (!option.optHeader) {\n      acc.push(option);\n    }\n    return acc;\n  }, []);\n\n  // Note: Will fail if no non-optHeader options exist\n  return {\n    ...possibleOptions[0],\n    name: state.name,\n  };\n}\n\nexport function getSingleSelectSelectedOption(\n  state: IState,\n  initialSelectedIndex: number = 0\n): IOption & { name?: string } {\n  const selectionIndex = initialSelectedIndex === -1 && !state.noSelectionLabel ? 0 : initialSelectedIndex;\n\n  // if optHeader, then use existing state.singleSelectSelectedOption, or findClosestValidOption\n  if (state.options[selectionIndex] && state.options[selectionIndex].optHeader) {\n    return closestValidOption(state);\n  }\n\n  // Has selection, has no selection use default noSelectionLabel (if exists) and nullify value\n  if (!state.noSelectionLabel) {\n    // Preselect the first item in the list when if no noSelectionLabel exists\n    return {\n      name: state.name,\n      ...state.options[selectionIndex],\n    };\n  }\n\n  return initialSelectedIndex > -1\n    ? {\n        name: state.name,\n        ...state.options[initialSelectedIndex],\n      }\n    : {\n        name: state.name,\n        text: state.noSelectionLabel,\n        value: 'null',\n      };\n}\n","import { IState } from '../../types/';\n\nexport function isAltered(newState: IState): boolean {\n  return !newState.multiselect\n    ? newState.singleSelectSelectedIndex !== newState.singleSelectInitialIndex\n    : !(\n        JSON.stringify(newState.multiSelectInitialSelectedIndexes) ===\n        JSON.stringify(newState.multiSelectSelectedIndexes)\n      );\n}\n\nexport function mergeIsAlteredState(newState: IState): IState {\n  return {\n    ...newState,\n    altered: isAltered(newState),\n  };\n}\n","import { IState } from '../../types/';\n\nexport function removeMultiSelectIndex(state: IState, indexLocation: number): number[] {\n  return [\n    ...state.multiSelectSelectedIndexes.slice(0, indexLocation),\n    ...state.multiSelectSelectedIndexes.slice(indexLocation + 1),\n  ];\n}\n","import { IOutputMultiSelectOption, IState } from '../../types/';\n\nexport function removeMultiSelectOption(\n  state: IState,\n  indexLocation: number\n): {\n  options: IOutputMultiSelectOption[];\n} {\n  return {\n    options: [\n      ...state.multiSelectSelectedOptions.options.slice(0, indexLocation),\n      ...state.multiSelectSelectedOptions.options.slice(indexLocation + 1),\n    ],\n  };\n}\n","import * as actionTypes from '../constants/actionTypes';\nimport { nextValidIndex } from '../lib/nextValidIndex';\nimport { IAction, IOption, IState } from '../types/';\n\nimport {\n  addMultiSelectIndex,\n  addMultiSelectOption,\n  getInitialMultiSelectOption,\n  getMultiSelectInitialSelectedOptions,\n  getMultiSelectSelectedValueIndexes,\n  getSelectedValueIndex,\n  getSingleSelectSelectedOption,\n  mergeIsAlteredState,\n  removeMultiSelectIndex,\n  removeMultiSelectOption,\n  resetMultiSelectState,\n} from './lib';\n\nexport function reducer(state: IState, action: IAction): IState {\n  switch (action.type) {\n    case actionTypes.INITIALISE: {\n      const initialSelectedIndex = getSelectedValueIndex(action.value);\n      const initialSelectedIndexes = getMultiSelectSelectedValueIndexes(\n        action.value,\n        action.value.selectedValues,\n        action.value.noSelectionLabel\n      );\n\n      return {\n        ...state,\n\n        hasOptHeaders: action.value.options.some((option: IOption) => option.optHeader === true),\n\n        // Constants\n        multiselect: action.value.multiselect || false,\n\n        // Optional nothing selected label\n        noSelectionLabel: action.value.noSelectionLabel,\n\n        // Universal\n        name: action.value.name,\n        options: action.value.options,\n        altered: action.value.altered || false,\n        disabled: action.value.options.length === 0 || action.value.disabled || false,\n\n        // Single select\n        singleSelectInitialIndex: initialSelectedIndex,\n        singleSelectSelectedIndex: initialSelectedIndex,\n        singleSelectSelectedOption: getSingleSelectSelectedOption(action.value, initialSelectedIndex),\n\n        nextPotentialSelectionIndex: state.nextPotentialSelectionIndex\n          ? state.nextPotentialSelectionIndex\n          : initialSelectedIndex,\n\n        // Multi select\n        multiSelectInitialSelectedIndexes: initialSelectedIndexes,\n        multiSelectSelectedIndexes: initialSelectedIndexes,\n        multiSelectSelectedOptions: {\n          options:\n            action.value.options.length > 0\n              ? getMultiSelectInitialSelectedOptions(action.value, action.value.selectedValues)\n              : [],\n        },\n      };\n    }\n\n    case actionTypes.SET_IS_DRAGGING:\n      return {\n        ...state,\n        isDragging: action.value,\n      };\n\n    case actionTypes.SET_OPTIONS_PANEL_OPEN: {\n      const newState = {\n        ...state,\n        isOptionsPanelOpen: true,\n\n        // For determining highlighted item on Keyboard navigation\n        nextPotentialSelectionIndex: ((): number => {\n          if (state.multiselect) {\n            return state.multiSelectSelectedIndexes.length\n              ? nextValidIndex(state, state.multiSelectSelectedIndexes[0])\n              : nextValidIndex(state, 0);\n          }\n          return nextValidIndex(state, state.nextPotentialSelectionIndex);\n        })(),\n\n        singleSelectSelectedOption: getSingleSelectSelectedOption(state, state.nextPotentialSelectionIndex),\n      };\n\n      return mergeIsAlteredState(newState);\n    }\n\n    case actionTypes.SET_OPTIONS_PANEL_CLOSED: {\n      const newState = {\n        ...state,\n        isOptionsPanelOpen: false,\n        singleSelectSelectedIndex: state.nextPotentialSelectionIndex,\n        singleSelectSelectedOption: getSingleSelectSelectedOption(state, state.nextPotentialSelectionIndex),\n      };\n      return mergeIsAlteredState(newState);\n    }\n\n    case actionTypes.SET_OPTIONS_PANEL_CLOSED_NO_SELECTION:\n    case actionTypes.SET_OPTIONS_PANEL_CLOSED_ONBLUR:\n      return {\n        ...state,\n        isOptionsPanelOpen: false,\n      };\n\n    case actionTypes.SET_NEXT_SELECTED_INDEX:\n      return {\n        ...state,\n        nextPotentialSelectionIndex: action.value,\n      };\n\n    case actionTypes.SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC:\n      return {\n        ...state,\n        isOptionsPanelOpen: true,\n        nextPotentialSelectionIndex: action.value,\n      };\n\n    case actionTypes.SET_SINGLESELECT_OPTIONS: {\n      const nextState = {\n        ...state,\n        nextPotentialSelectionIndex: action.value,\n        singleSelectSelectedIndex: action.value,\n        isOptionsPanelOpen: false,\n        singleSelectSelectedOption: getSingleSelectSelectedOption(state, action.value),\n      };\n\n      // Set altered state\n      return mergeIsAlteredState(nextState);\n    }\n\n    case actionTypes.SET_MULTISELECT_OPTIONS: {\n      if (!state.noSelectionLabel) {\n        const isFirstOptionInListSelected =\n          state.multiSelectSelectedIndexes[0] === 0 && state.multiSelectSelectedIndexes.length === 1;\n\n        // If anything selected and first option was requested, deselect all, then select first option\n        const shouldDeselectAllAndSelectFirstOption =\n          state.multiSelectSelectedIndexes.length > 0 &&\n          !isFirstOptionInListSelected &&\n          action.value === 0 &&\n          !state.noSelectionLabel;\n\n        // Deselect first option when any other value is requested\n        const shouldDeselectFirstOptionAndSelectRequestedOption = isFirstOptionInListSelected && action.value !== 0;\n\n        // If any thing selected and first option was requested, deselect all, and return first option\n        if (shouldDeselectAllAndSelectFirstOption) {\n          return mergeIsAlteredState(getInitialMultiSelectOption(state));\n        }\n\n        // Deselect first option when first option selected and another option is requested\n        if (shouldDeselectFirstOptionAndSelectRequestedOption) {\n          // eslint-disable-next-line no-param-reassign\n          state = resetMultiSelectState(state);\n        }\n      }\n\n      // Remove noSelectionLabel from selected options if something is selected\n      if (state.noSelectionLabel && state.multiSelectSelectedOptions.options[0].text === state.noSelectionLabel) {\n        // eslint-disable-next-line no-param-reassign\n        state.multiSelectSelectedOptions.options = [];\n      }\n\n      // With optHeader, action.value can go out of bounds - check and adjust the value of value when requried\n      const actionOptionIndexAdjusted = nextValidIndex(state, action.value);\n\n      // Find index of requested option\n      const indexLocation = state.multiSelectSelectedIndexes.indexOf(actionOptionIndexAdjusted);\n\n      // If requested item does not exist, add it. Else remove it\n      let nextState = {\n        ...state,\n        nextPotentialSelectionIndex: actionOptionIndexAdjusted,\n        multiSelectSelectedIndexes:\n          indexLocation === -1\n            ? addMultiSelectIndex(state, actionOptionIndexAdjusted)\n            : removeMultiSelectIndex(state, indexLocation),\n        multiSelectSelectedOptions:\n          indexLocation === -1\n            ? addMultiSelectOption(state, actionOptionIndexAdjusted)\n            : removeMultiSelectOption(state, indexLocation),\n      };\n\n      if (nextState.multiSelectSelectedOptions.options.length === 0) {\n        // Reset to noSelectionLabel if user has deselected all items and has set a `noSelectionLabel` prop\n        if (state.noSelectionLabel) {\n          nextState = {\n            ...nextState,\n            nextPotentialSelectionIndex: state.hasOptHeaders ? nextValidIndex(state, -1) : -1,\n            multiSelectSelectedOptions: {\n              options: getMultiSelectInitialSelectedOptions(state),\n            },\n          };\n        } else if (!state.noSelectionLabel) {\n          // Select first option if user has deselected all items\n          nextState = getInitialMultiSelectOption(state);\n        }\n      }\n      // Set altered state\n      return mergeIsAlteredState(nextState);\n    }\n    default:\n      return state;\n  }\n}\n","import { IOption } from '../../types/';\n\ninterface TArgs {\n  options: IOption[];\n  selectedValue: string;\n  noSelectionLabel: string;\n}\n\nexport function getSelectedValueIndex({ options, selectedValue, noSelectionLabel }: TArgs): number {\n  const index = selectedValue ? options.map((option: IOption) => option.value).indexOf(selectedValue) : -1;\n\n  // Allow a negative index if user wants to display a noSelectionLabel\n  // Keyboard will not focus on an option when first opened\n\n  // Select the first option when panel opens if !noSelectionLabel\n  return index > -1 || noSelectionLabel ? index : 0;\n}\n","import { nextValidIndex } from '../../lib/nextValidIndex';\nimport { IState } from '../../types/';\n\nexport function getMultiSelectSelectedValueIndexes(\n  state: IState,\n  selectedValues: string[] = [],\n  noSelectionLabel?: string\n): number[] {\n  const { options } = state;\n  const emptyResult = noSelectionLabel ? [] : [nextValidIndex(state, 0)];\n\n  /* return the index of the found item, if found */\n  const result = options.reduce((acc: any, option: any, value: number) => {\n    if (selectedValues.some((selected: string) => option.value === selected)) {\n      acc.push(value);\n    }\n    return acc;\n  }, []);\n\n  /* If something found return that, else return the first item */\n  return result.length > 0 ? result : emptyResult;\n}\n","import { IState } from '../../types/';\nimport { initialState } from '../initialState';\n\nexport function resetMultiSelectState(state: IState): IState {\n  return {\n    // reset multiSelect state\n    ...state,\n    multiSelectSelectedIndexes: [...initialState.multiSelectSelectedIndexes],\n    multiSelectSelectedOptions: { ...initialState.multiSelectSelectedOptions },\n  };\n}\n","import * as React from 'react';\nimport singleline from 'singleline';\nimport { IOption } from '../types/';\n\ninterface TProps {\n  name: string;\n  index: number;\n  isOptionsPanelOpen: boolean;\n  nextPotentialSelectionIndex: number;\n  optionsContainerRef: React.RefObject<HTMLUListElement>;\n  optHeaderLabel: string;\n  multiSelectSelectedIndexes: number[];\n  option: IOption;\n}\n\nexport class MultiSelectOption extends React.Component<TProps> {\n  private optionRef: React.RefObject<HTMLLIElement>;\n  private scrollOffset: number;\n\n  constructor(props: TProps) {\n    super(props);\n    this.optionRef = React.createRef();\n    this.scrollOffset = 0;\n  }\n\n  public getScrollOffset(): number {\n    const el = document.querySelector('.rrs__option--header');\n    return Math.ceil((el && el.getBoundingClientRect().height) || 0);\n  }\n\n  public componentDidUpdate(): void {\n    const { index, isOptionsPanelOpen, nextPotentialSelectionIndex, optionsContainerRef, optHeaderLabel } = this.props;\n\n    if (index === nextPotentialSelectionIndex && isOptionsPanelOpen) {\n      if (this.optionRef.current && optionsContainerRef.current) {\n        this.optionRef.current.focus();\n\n        if (optHeaderLabel !== '') {\n          const scrollDiff = Math.ceil(\n            this.optionRef.current.getBoundingClientRect().top - optionsContainerRef.current.getBoundingClientRect().top\n          );\n\n          this.scrollOffset = this.scrollOffset || this.getScrollOffset();\n\n          if (scrollDiff < this.scrollOffset) {\n            optionsContainerRef.current.scroll(\n              0,\n              Math.floor(optionsContainerRef.current.scrollTop - this.scrollOffset)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  public isDisabled(option: IOption): boolean {\n    return Boolean(option.disabled || option.optHeader);\n  }\n\n  public render(): React.ReactNode {\n    const { index, name, multiSelectSelectedIndexes, nextPotentialSelectionIndex, option, optHeaderLabel } = this.props;\n    const isSelected = multiSelectSelectedIndexes.some((i: number) => i === index);\n\n    return (\n      <li\n        role=\"checkbox\"\n        data-testid={`rrs-option_${name}_${index}`}\n        tabIndex={-1}\n        aria-checked={isSelected}\n        aria-label={`\n        ${option.text || (option.markup && (option.markup as HTMLElement).textContent)} ${\n          optHeaderLabel !== '' ? ` of ${optHeaderLabel}` : ''\n        }\n      `}\n        aria-live=\"assertive\"\n        aria-disabled={this.isDisabled(option) ? 'true' : 'false'}\n        data-key={index}\n        ref={this.optionRef}\n        className={singleline(`\n          rrs__option\n          ${isSelected ? 'rrs__option--selected' : ''}\n          ${nextPotentialSelectionIndex === index ? 'rrs__option--next-selection' : ''}\n          ${option.disabled === true ? 'rrs__option--disabled' : ''}\n          ${option.optHeader === true ? 'rrs__option--header' : ''}\n        `)}\n      >\n        {option.markup || option.text}\n      </li>\n    );\n  }\n}\n","import * as React from 'react';\nimport singleline from 'singleline';\nimport { IOption, IOutputMultiSelect, IOutputMultiSelectOption } from '../types/';\nimport { MultiSelectOption } from './MultiSelectOption';\n\ninterface TProps {\n  selectBoxRef: HTMLDivElement | null;\n  caretIcon: React.ReactNode;\n  customLabelText: React.ReactNode;\n  disabled: boolean;\n  isDragging: boolean;\n  isOptionsPanelOpen: boolean;\n  multiSelectSelectedIndexes: number[];\n  multiSelectSelectedOptions: IOutputMultiSelect;\n  name: string;\n  options: IOption[];\n  nextPotentialSelectionIndex: number;\n  prefix: string;\n}\n\nexport class MultiSelect extends React.Component<TProps> {\n  private optionsButton: React.RefObject<HTMLDivElement>;\n  private optionsContainer: React.RefObject<HTMLUListElement>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.optionsButton = React.createRef();\n    this.optionsContainer = React.createRef();\n  }\n\n  public componentDidUpdate(prevProps: TProps): void {\n    /*\n      Focus selectBox button if options panel has just closed,\n      there has been an interaction or the value has changed\n    */\n    const { isOptionsPanelOpen, selectBoxRef } = this.props;\n\n    const optionsPanelJustClosed = !isOptionsPanelOpen && prevProps.isOptionsPanelOpen;\n\n    if (optionsPanelJustClosed && selectBoxRef && selectBoxRef.contains(document.activeElement)) {\n      // tslint:disable-next-line\n      this.optionsButton.current && this.optionsButton.current.focus();\n    }\n  }\n\n  public getAriaLabel(): string {\n    const { multiSelectSelectedOptions, prefix } = this.props;\n    const selectedOptionsLength = multiSelectSelectedOptions.options.length;\n\n    return singleline(`\n      Checkbox group ${prefix ? `${prefix} ` : ''} has\n      ${selectedOptionsLength} item${selectedOptionsLength === 1 ? '' : 's'} selected.\n      Selected option${selectedOptionsLength === 1 ? '' : 's'} ${selectedOptionsLength === 1 ? 'is' : 'are'}\n      ${multiSelectSelectedOptions.options\n        .map((option: IOutputMultiSelectOption): string => option.text || '')\n        .join(' and ')}\n    `);\n  }\n\n  public render(): React.ReactNode {\n    const {\n      caretIcon,\n      customLabelText,\n      disabled,\n      isOptionsPanelOpen,\n      multiSelectSelectedIndexes,\n      multiSelectSelectedOptions,\n      name,\n      options,\n      nextPotentialSelectionIndex,\n      prefix,\n    } = this.props;\n\n    let optHeaderLabel: string = '';\n\n    return (\n      <div>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          aria-disabled={disabled}\n          aria-haspopup=\"true\"\n          aria-expanded={isOptionsPanelOpen}\n          aria-controls={`rrs-${name}-menu`}\n          ref={this.optionsButton}\n          className={singleline(`\n            rrs__button\n            ${disabled === true ? 'rrs__button--disabled' : ''}\n          `)}\n        >\n          {customLabelText && (\n            <div className=\"rrs__label\">\n              <span\n                aria-label={this.getAriaLabel()}\n                className=\"rrs__label__text\"\n                id={`rrs-${name}-label`}\n                data-testid={`rrs-label_${name}`}\n              >\n                {customLabelText}\n              </span>\n              {caretIcon && caretIcon}\n            </div>\n          )}\n\n          {!customLabelText && (\n            <div className=\"rrs__label\">\n              <span\n                aria-label={this.getAriaLabel()}\n                className=\"rrs__label__text\"\n                id={`rrs-${name}-label`}\n                data-testid={`rrs-label_${name}`}\n              >\n                <span className=\"rrs__multiselect-label\">\n                  <span className=\"rrs__multiselect-label__text\">\n                    {`${prefix ? `${prefix} ` : ''}\n                  ${multiSelectSelectedOptions.options.length > 0 ? multiSelectSelectedOptions.options[0].text : ''}`}\n                  </span>\n                  {multiSelectSelectedOptions.options.length > 1 && (\n                    <span className=\"rrs__multiselect-label__badge\">\n                      {`+ ${multiSelectSelectedOptions.options.length - 1}`}\n                    </span>\n                  )}\n                </span>\n              </span>\n              {caretIcon && caretIcon}\n            </div>\n          )}\n\n          {name && (\n            <input\n              type=\"hidden\"\n              name={name}\n              data-testid={`rrs-input_${name}`}\n              value={[multiSelectSelectedOptions.options.map((v: IOutputMultiSelectOption) => v.value)].join(',')}\n            />\n          )}\n        </div>\n\n        <ul\n          id={`rrs-${name}-menu`}\n          aria-labelledby={`rrs-${name}-label`}\n          role=\"menu\"\n          className=\"rrs__options\"\n          ref={this.optionsContainer}\n        >\n          {options.length > 0 &&\n            options.map((option: IOption, index: number) => {\n              if (option.optHeader) {\n                optHeaderLabel = option.text || (option.markup && (option.markup as HTMLElement).textContent) || '';\n              }\n              return (\n                <MultiSelectOption\n                  key={index}\n                  name={name}\n                  optHeaderLabel={optHeaderLabel}\n                  optionsContainerRef={this.optionsContainer}\n                  index={index}\n                  option={option}\n                  isOptionsPanelOpen={isOptionsPanelOpen}\n                  multiSelectSelectedIndexes={multiSelectSelectedIndexes}\n                  nextPotentialSelectionIndex={nextPotentialSelectionIndex}\n                />\n              );\n            })}\n        </ul>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport singleline from 'singleline';\nimport { IOption } from '../types/';\n\ninterface TProps {\n  index: number;\n  name: string;\n  isOptionsPanelOpen: boolean;\n  optionsContainerRef: React.RefObject<HTMLUListElement>;\n  nextPotentialSelectionIndex: number;\n  option: IOption;\n  singleSelectSelectedIndex: number;\n  optHeaderLabel: string;\n}\n\nexport class SingleSelectOption extends React.Component<TProps> {\n  private optionRef: React.RefObject<HTMLLIElement>;\n  private scrollOffset: number;\n\n  constructor(props: TProps) {\n    super(props);\n    this.optionRef = React.createRef();\n    this.scrollOffset = 0;\n  }\n\n  public getScrollOffset(): number {\n    const el = document.querySelector('.rrs__option--header');\n    return Math.ceil((el && el.getBoundingClientRect().height) || 0);\n  }\n\n  public componentDidUpdate(): void {\n    const { index, isOptionsPanelOpen, nextPotentialSelectionIndex, optionsContainerRef, optHeaderLabel } = this.props;\n\n    if (index === nextPotentialSelectionIndex && isOptionsPanelOpen) {\n      if (this.optionRef.current && optionsContainerRef.current) {\n        this.optionRef.current.focus();\n\n        if (optHeaderLabel !== '') {\n          const scrollDiff = Math.ceil(\n            this.optionRef.current.getBoundingClientRect().top - optionsContainerRef.current.getBoundingClientRect().top\n          );\n\n          this.scrollOffset = this.scrollOffset || this.getScrollOffset();\n\n          if (scrollDiff < this.scrollOffset) {\n            optionsContainerRef.current.scroll(\n              0,\n              Math.floor(optionsContainerRef.current.scrollTop - this.scrollOffset)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  public isDisabled(option: IOption): boolean {\n    return Boolean(option.disabled || option.optHeader);\n  }\n\n  public render(): React.ReactNode {\n    const { index, name, nextPotentialSelectionIndex, option, singleSelectSelectedIndex, optHeaderLabel } = this.props;\n\n    return (\n      <li\n        role=\"menuitem\"\n        data-testid={`rrs-option_${name}_${index}`}\n        tabIndex={-1}\n        aria-disabled={this.isDisabled(option) ? 'true' : 'false'}\n        aria-label={`\n          ${option.text || (option.markup && (option.markup as HTMLElement).textContent)} ${\n          optHeaderLabel !== '' ? ` of ${optHeaderLabel}` : ''\n        }\n        `}\n        data-key={index}\n        ref={this.optionRef}\n        className={singleline(`\n          rrs__option\n          ${singleSelectSelectedIndex === index ? 'rrs__option--selected' : ''}\n          ${nextPotentialSelectionIndex === index ? 'rrs__option--next-selection' : ''}\n          ${option.disabled === true ? 'rrs__option--disabled' : ''}\n          ${option.optHeader === true ? 'rrs__option--header' : ''}\n        `)}\n      >\n        {option.markup || option.text}\n      </li>\n    );\n  }\n}\n","import * as React from 'react';\nimport singleline from 'singleline';\nimport { IOption, IOutputSingleSelect } from '../types/';\nimport { SingleSelectOption } from './SingleSelectOption';\n\ninterface TProps {\n  prefix: string;\n  singleSelectSelectedOption: IOutputSingleSelect;\n  name: string;\n  caretIcon: React.ReactNode;\n  singleSelectSelectedIndex: number;\n  noSelectionLabel: string;\n  isOptionsPanelOpen: boolean;\n  nextPotentialSelectionIndex: number;\n  selectBoxRef: HTMLDivElement | null;\n  customLabelText: React.ReactNode;\n  disabled: boolean;\n  options: IOption[];\n}\n\nexport class SingleSelect extends React.Component<TProps> {\n  private optionsButton: React.RefObject<HTMLDivElement>;\n  private optionsContainer: React.RefObject<HTMLUListElement>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.optionsButton = React.createRef();\n    this.optionsContainer = React.createRef();\n  }\n\n  public componentDidUpdate(prevProps: TProps): void {\n    /*\n      Focus selectBox button if options panel has just closed,\n      there has been an interaction,\n      or isOptionsPanelOpen and nextPotentialSelectionIndex === -1\n    */\n    const { isOptionsPanelOpen, nextPotentialSelectionIndex, selectBoxRef } = this.props;\n\n    const optionsPanelJustClosed = !isOptionsPanelOpen && prevProps.isOptionsPanelOpen;\n\n    if (this.optionsButton.current) {\n      if (optionsPanelJustClosed && selectBoxRef && selectBoxRef.contains(document.activeElement)) {\n        this.optionsButton.current.focus();\n      }\n\n      if (isOptionsPanelOpen && nextPotentialSelectionIndex === -1) {\n        this.optionsButton.current.focus();\n      }\n    }\n  }\n\n  public getCustomLabel(): React.ReactNode {\n    const { prefix, name, singleSelectSelectedOption, caretIcon, customLabelText } = this.props;\n\n    return (\n      <div className=\"rrs__label\">\n        <span\n          aria-label={`${prefix ? `${prefix} ` : ''}${singleSelectSelectedOption.text} selected`}\n          className=\"rrs__label__text\"\n          id={`rrs-${name}-label`}\n          data-testid={`rrs-label_${name}`}\n        >\n          {customLabelText}\n        </span>\n        {caretIcon && caretIcon}\n      </div>\n    );\n  }\n\n  public getDefaultLabel(): React.ReactNode {\n    const {\n      prefix,\n      singleSelectSelectedOption,\n      name,\n      caretIcon,\n      singleSelectSelectedIndex,\n      noSelectionLabel,\n    } = this.props;\n\n    if (singleSelectSelectedIndex === -1) {\n      return (\n        <div className=\"rrs__label\">\n          <span\n            aria-label={noSelectionLabel}\n            className=\"rrs__label__text\"\n            id={`rrs-${name}-label`}\n            data-testid={`rrs-label_${name}`}\n          >\n            {prefix && <span>{prefix}</span>}\n            {noSelectionLabel}\n          </span>\n          {caretIcon && caretIcon}\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"rrs__label\">\n        <span\n          aria-label={`${prefix ? `${prefix} ` : ''}${singleSelectSelectedOption.text} selected`}\n          className=\"rrs__label__text\"\n          id={`rrs-${name}-label`}\n          data-testid={`rrs-label_${name}`}\n        >\n          {prefix && <span>{prefix}</span>}\n          {singleSelectSelectedOption.text ? singleSelectSelectedOption.text : <span>&nbsp;</span>}\n        </span>\n        {caretIcon && caretIcon}\n      </div>\n    );\n  }\n\n  public render(): React.ReactNode {\n    const {\n      customLabelText,\n      disabled,\n      isOptionsPanelOpen,\n      name,\n      nextPotentialSelectionIndex,\n      options,\n      singleSelectSelectedIndex,\n      singleSelectSelectedOption,\n    } = this.props;\n\n    let optHeaderLabel: string = '';\n\n    return (\n      <div>\n        <div\n          role=\"button\"\n          tabIndex={0}\n          aria-disabled={disabled}\n          aria-haspopup=\"true\"\n          aria-expanded={isOptionsPanelOpen}\n          aria-controls={`rrs-${name}-menu`}\n          ref={this.optionsButton}\n          className={singleline(`\n            rrs__button\n            ${disabled === true ? 'rrs__button--disabled' : ''}\n          `)}\n        >\n          {customLabelText ? this.getCustomLabel() : this.getDefaultLabel()}\n\n          {name && (\n            <input\n              type=\"hidden\"\n              name={name}\n              data-testid={`rrs-input_${name}`}\n              value={singleSelectSelectedOption.value}\n            />\n          )}\n        </div>\n\n        <ul\n          id={`rrs-${name}-menu`}\n          aria-labelledby={`rrs-${name}-label`}\n          role=\"menu\"\n          className=\"rrs__options\"\n          ref={this.optionsContainer}\n        >\n          {options.length > 0 &&\n            options.map((option: IOption, index: number) => {\n              if (option.optHeader) {\n                optHeaderLabel = option.text || (option.markup && (option.markup as HTMLElement).textContent) || '';\n              }\n              return (\n                <SingleSelectOption\n                  key={index}\n                  name={name}\n                  optHeaderLabel={optHeaderLabel}\n                  optionsContainerRef={this.optionsContainer}\n                  index={index}\n                  isOptionsPanelOpen={isOptionsPanelOpen}\n                  option={option}\n                  singleSelectSelectedIndex={singleSelectSelectedIndex}\n                  nextPotentialSelectionIndex={nextPotentialSelectionIndex}\n                />\n              );\n            })}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\n/* tslint:disable:max-line-length*/\nexport const CaretIcon = (props: any): React.ReactElement => (\n  <svg\n    className=\"caret-icon\"\n    x=\"0px\"\n    y=\"0px\"\n    width=\"11.848px\"\n    height=\"6.338px\"\n    viewBox=\"351.584 2118.292 11.848 6.338\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...props}\n  >\n    <g>\n      <path d=\"M363.311,2118.414c-0.164-0.163-0.429-0.163-0.592,0l-5.205,5.216l-5.215-5.216c-0.163-0.163-0.429-0.163-0.592,0s-0.163,0.429,0,0.592l5.501,5.501c0.082,0.082,0.184,0.123,0.296,0.123c0.103,0,0.215-0.041,0.296-0.123l5.501-5.501C363.474,2118.843,363.474,2118.577,363.311,2118.414L363.311,2118.414z\" />\n    </g>\n  </svg>\n);\n\nexport const ErrorIcon = (props: any): React.ReactElement => (\n  <svg\n    x=\"0px\"\n    y=\"0px\"\n    width=\"12px\"\n    height=\"12px\"\n    viewBox=\"0 0 1000 1000\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    style={{ fill: 'currentColor', marginRight: '4px' }}\n    {...props}\n  >\n    <g>\n      <path d=\"M868,953.8H132.1c-49.3,0-89-19.3-108.8-53.1C3.5,867,5.9,822.9,29.9,779.8l371.3-665.4c24.2-43.4,60.1-68.2,98.6-68.2c38.5,0,74.4,24.8,98.6,68.2L970,779.9c24,43.1,26.5,87.1,6.7,120.8C956.9,934.5,917.3,953.8,868,953.8L868,953.8z M499.8,116.1c-12.2,0-26.2,12.1-37.6,32.4L90.9,813.9c-11.6,20.9-14.4,39.6-7.4,51.5c7,11.8,24.7,18.6,48.5,18.6H868c23.9,0,41.6-6.7,48.5-18.6c6.9-11.8,4.2-30.6-7.4-51.4L537.4,148.5C526.1,128.2,512,116.1,499.8,116.1L499.8,116.1z M500,638.7c-19.3,0-34.9-15.6-34.9-34.9V289.5c0-19.3,15.6-34.9,34.9-34.9c19.3,0,34.9,15.6,34.9,34.9v314.3C534.9,623.1,519.3,638.7,500,638.7z M447.6,761.1c0,28.9,23.5,52.4,52.4,52.4c28.9,0,52.4-23.5,52.4-52.4c0-28.9-23.5-52.4-52.4-52.4C471.1,708.7,447.6,732.2,447.6,761.1z\" />\n    </g>\n  </svg>\n);\n\nexport const ModalCloseButton = (props: any): React.ReactElement => (\n  <div>\n    <svg\n      className=\"mobile-close__icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"12px\"\n      height=\"12px\"\n      viewBox=\"0 0 2541 2541\"\n      {...props}\n    >\n      <path d=\"M29 172c-39-39-39-103 0-142s103-39 142 0l1099 1099L2369 30c39-39 103-39 142 0s39 103 0 142L1412 1271l1099 1099c39 39 39 103 0 142s-103 39-142 0L1270 1413 171 2512c-39 39-103 39-142 0s-39-103 0-142l1099-1099L29 172z\" />\n    </svg>\n  </div>\n);\n\nexport const CheckboxIcon = (props: any): React.ReactElement => (\n  <svg\n    className=\"checkbox-icon\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    x=\"0px\"\n    y=\"0px\"\n    width=\"12px\"\n    height=\"12px\"\n    viewBox=\"0 0 488.878 488.878\"\n    {...props}\n  >\n    <g>\n      <polygon points=\"143.294,340.058 50.837,247.602 0,298.439 122.009,420.447 122.149,420.306 144.423,442.58 488.878,98.123 437.055,46.298 \" />\n    </g>\n  </svg>\n);\n\nexport const MultiSelectOptionMarkup = ({ text, ...props }: { text: string; props: any }): React.ReactElement => (\n  <div className=\"checkbox-container\">\n    <span className=\"checkbox\">\n      <CheckboxIcon {...props} />\n    </span>\n    <span className=\"checkbox-text\"> {text}</span>\n  </div>\n);\n/* tslint:enable:max-line-length */\n","import * as React from 'react';\nimport singleline from 'singleline';\nimport * as actionTypes from './constants/actionTypes';\nimport { handleBlur, handleClick, handleKeyEvent, handleTouchMove, handleTouchStart } from './lib/eventHandlers';\nimport { getCustomLabelText } from './lib/getCustomLabelText';\nimport { multiSelectBroadcastChange, singleSelectBroadcastChange } from './lib/onChangeBroadcasters';\nimport { initialState } from './reducers/initialState';\nimport { reducer } from './reducers/reducer';\nimport { IAction, IProps, IState } from './types/';\n\nimport { MultiSelect } from './components/MultiSelect';\nimport { SingleSelect } from './components/SingleSelect';\n\nexport class Select extends React.Component<IProps, IState> {\n  public selectBox: HTMLDivElement | null;\n  private reducer: (state: IState, action: IAction) => IState;\n  private firstLoad: boolean;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = initialState;\n    this.reducer = reducer;\n    this.firstLoad = true;\n    this.selectBox = null;\n  }\n\n  public componentDidMount(): void {\n    const { options, noSelectionLabel, selectedValue, selectedValues, name, multiselect, disabled } = this.props;\n\n    this.updateState({\n      type: actionTypes.INITIALISE,\n      value: {\n        options,\n        noSelectionLabel,\n        selectedValue,\n        selectedValues,\n        name,\n        multiselect,\n        disabled,\n      },\n    });\n  }\n\n  public componentDidUpdate(_prevProps: IProps, prevState: IState): boolean {\n    const { singleSelectSelectedOption, multiSelectSelectedOptions, multiselect, altered } = this.state;\n    const { onChange } = this.props;\n\n    if (this.firstLoad) {\n      this.firstLoad = false;\n      return false;\n    }\n\n    if (multiselect) {\n      multiSelectBroadcastChange(\n        multiSelectSelectedOptions.options,\n        Boolean(altered),\n        onChange,\n        prevState.multiSelectSelectedOptions.options\n      );\n    } else {\n      singleSelectBroadcastChange(\n        singleSelectSelectedOption,\n        Boolean(altered),\n        onChange,\n        prevState.singleSelectSelectedOption\n      );\n    }\n\n    return true;\n  }\n\n  public updateState(action: IAction, callback?: (nextState: IState) => any): void {\n    const { onListen, name } = this.props;\n    const nextState = this.reducer(this.state, action);\n\n    this.setState(nextState, () => {\n      if (callback) {\n        callback(nextState);\n      }\n    });\n\n    /* Allow user to listen to actions being fired */\n    if (onListen) {\n      const isOpen = [\n        actionTypes.SET_OPTIONS_PANEL_OPEN,\n        actionTypes.SET_NEXT_SELECTED_INDEX,\n        actionTypes.SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC,\n        actionTypes.SET_IS_DRAGGING,\n      ].some((actionType: string) => action.type === actionType);\n\n      onListen(isOpen, name, action.type);\n    }\n  }\n\n  public focusButton(): void {\n    const el: HTMLDivElement | null = this.selectBox && this.selectBox.querySelector('.rrs__button');\n    // tslint:disable-next-line no-unused-expression\n    el && el.focus();\n  }\n\n  public onHandleKeyEvent = (e: any): void => {\n    handleKeyEvent({\n      event: e,\n      RRSClassRef: this,\n      state: this.state,\n      props: this.props,\n    });\n  };\n\n  public onHandleTouchStart = (_e: any): void => {\n    handleTouchStart({\n      RRSClassRef: this,\n      state: this.state,\n    });\n  };\n\n  public onHandleTouchMove = (_e: any): void => {\n    handleTouchMove({\n      RRSClassRef: this,\n      state: this.state,\n    });\n  };\n\n  public onHandleClick = (e: any): void => {\n    handleClick({\n      event: e,\n      RRSClassRef: this,\n      state: this.state,\n      props: this.props,\n    });\n  };\n\n  public onHandleBlur = (_e: any): void => {\n    handleBlur({\n      RRSClassRef: this,\n      state: this.state,\n      props: this.props,\n    });\n  };\n\n  public render(): React.ReactNode {\n    const { prefix, caretIcon, modalCloseButton } = this.props;\n    const {\n      altered,\n      disabled,\n      hasOptHeaders,\n      isOptionsPanelOpen,\n      isDragging,\n      noSelectionLabel,\n      multiSelectSelectedIndexes,\n      multiSelectSelectedOptions,\n      name,\n      nextPotentialSelectionIndex,\n      options,\n      singleSelectSelectedIndex,\n      singleSelectSelectedOption,\n      multiselect,\n    } = this.state;\n\n    const customLabelText = getCustomLabelText({\n      props: this.props,\n      state: this.state,\n    });\n\n    return (\n      <div\n        data-testid={name}\n        data-name={name}\n        className={singleline(`\n          rrs\n          ${isOptionsPanelOpen === true ? 'rrs--options-visible' : ''}\n          ${altered ? 'rrs--has-changed' : ''}\n          ${hasOptHeaders ? 'rrs--has-opt-headers' : ''}\n        `)}\n        ref={(r: HTMLDivElement): void => {\n          this.selectBox = r;\n        }}\n        tabIndex={-1}\n        onKeyDown={this.onHandleKeyEvent}\n        onTouchStart={this.onHandleTouchStart}\n        onTouchMove={this.onHandleTouchMove}\n        onTouchEnd={this.onHandleClick}\n        onMouseDown={this.onHandleClick}\n        onBlur={this.onHandleBlur}\n      >\n        {!!modalCloseButton && isOptionsPanelOpen === true && (\n          <div aria-hidden=\"true\" className=\"mobile-close\">\n            {modalCloseButton}\n          </div>\n        )}\n        {multiselect ? (\n          <MultiSelect\n            disabled={Boolean(disabled)}\n            isDragging={isDragging}\n            caretIcon={caretIcon}\n            customLabelText={customLabelText}\n            prefix={prefix || ''}\n            name={name}\n            multiSelectSelectedOptions={multiSelectSelectedOptions}\n            multiSelectSelectedIndexes={multiSelectSelectedIndexes}\n            nextPotentialSelectionIndex={nextPotentialSelectionIndex}\n            isOptionsPanelOpen={isOptionsPanelOpen}\n            options={options}\n            selectBoxRef={this.selectBox}\n          />\n        ) : (\n          <SingleSelect\n            noSelectionLabel={noSelectionLabel || ''}\n            disabled={Boolean(disabled)}\n            caretIcon={caretIcon}\n            prefix={prefix || ''}\n            name={name}\n            customLabelText={customLabelText}\n            singleSelectSelectedOption={singleSelectSelectedOption}\n            singleSelectSelectedIndex={singleSelectSelectedIndex}\n            nextPotentialSelectionIndex={nextPotentialSelectionIndex}\n            isOptionsPanelOpen={isOptionsPanelOpen}\n            options={options}\n            selectBoxRef={this.selectBox}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport * from './Extras';\nexport * from './types/';\n","export function preventDefaultForKeyCodes(keyCodes: number[], e: KeyboardEvent): void {\n  keyCodes.forEach((keyCode: number) => {\n    if (keyCode === e.keyCode) {\n      e.preventDefault();\n    }\n  });\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { keyCodes } from '../../constants/keyCodes';\nimport { Select } from '../../react-responsive-select';\nimport { IProps, IState } from '../../types/';\nimport { preventDefaultForKeyCodes } from '../preventDefaultForKeyCodes';\nimport { handleAlphaNumerical } from './handleAlphaNumerical';\nimport { handleClick } from './handleClick';\nimport { handleEnterPressed } from './handleEnterPressed';\nimport { handleKeyUpOrDownPressed } from './handleKeyUpOrDownPressed';\n\ninterface TArgs {\n  event: KeyboardEvent;\n  state: IState;\n  props: IProps;\n  RRSClassRef: Select;\n}\n\nexport function handleKeyEvent({ event, state, props, RRSClassRef }: TArgs): void {\n  const { multiselect, isOptionsPanelOpen, disabled } = state;\n\n  if (disabled) return;\n\n  preventDefaultForKeyCodes([keyCodes.ENTER, keyCodes.SPACE, keyCodes.ESCAPE, keyCodes.UP, keyCodes.DOWN], event);\n\n  /* handle alpha-nemeric key press */\n  if (/^[a-z0-9]+$/.test(event.key)) {\n    handleAlphaNumerical({ event, RRSClassRef, state });\n  }\n\n  switch (event.keyCode) {\n    case keyCodes.TAB:\n      /* Don't shift focus when the panel is open (unless it's a Multiselect) */\n      if (isOptionsPanelOpen) {\n        event.preventDefault();\n\n        /**\n         * Multiselect does not close on selection. Focus button to blur and close options panel on TAB\n         * TODO add a test for this\n         */\n        if (multiselect) {\n          RRSClassRef.updateState({ type: actionTypes.SET_OPTIONS_PANEL_CLOSED }, () => RRSClassRef.focusButton());\n        }\n      }\n      break;\n\n    case keyCodes.ENTER:\n      /* can close the panel when open and focussed\n       * can submit the form when closed and focussed */\n      handleEnterPressed({\n        RRSClassRef,\n        event,\n        props,\n        state,\n      });\n      break;\n\n    case keyCodes.SPACE:\n      /* close the panel and select option when open, or open the panel if closed */\n      if (isOptionsPanelOpen) {\n        handleClick({ event, state, RRSClassRef, props });\n      } else {\n        RRSClassRef.updateState({\n          type: actionTypes.SET_OPTIONS_PANEL_OPEN,\n        });\n      }\n      break;\n\n    case keyCodes.ESCAPE:\n      /* remove focus from the panel when focussed */\n      RRSClassRef.updateState({ type: actionTypes.SET_OPTIONS_PANEL_CLOSED_NO_SELECTION }, () =>\n        RRSClassRef.focusButton()\n      );\n      break;\n\n    case keyCodes.UP:\n      /* will open the options panel if closed\n       * will not decrement selection if options panel closed\n       * if panel open, will decrement up the options list */\n      handleKeyUpOrDownPressed({\n        RRSClassRef,\n        state,\n        type: 'DECREMENT',\n      });\n      break;\n\n    case keyCodes.DOWN:\n      /* will open the options panel if closed\n       * will not increment selection if options panel closed\n       * if panel open, will increment down the options list */\n      handleKeyUpOrDownPressed({\n        RRSClassRef,\n        state,\n        type: 'INCREMENT',\n      });\n      break;\n\n    default:\n      break;\n  }\n}\n","export const keyCodes = {\n  TAB: 9,\n  ENTER: 13,\n  SPACE: 32,\n  ESCAPE: 27,\n  UP: 38,\n  DOWN: 40,\n};\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IProps, IState } from '../../types/';\n\ninterface IArgs {\n  event: KeyboardEvent;\n  state: IState;\n  props: IProps;\n  RRSClassRef: Select;\n}\n\nexport function handleEnterPressed({ event, state, props, RRSClassRef }: IArgs): void {\n  const { disabled, isOptionsPanelOpen, multiselect, nextPotentialSelectionIndex, options } = state;\n\n  if (disabled) return;\n\n  const value = parseFloat((event.target as any).getAttribute('data-key'));\n\n  if (options[value] && (options[value].disabled === true || options[value].optHeader === true)) {\n    return;\n  }\n\n  if (multiselect) {\n    const isExistingSelection = state.multiSelectSelectedOptions.options.some(\n      option => options[value] && options[value].hasOwnProperty('value') && option.value === options[value].value\n    );\n\n    if (!isExistingSelection && props.onSelect) {\n      props.onSelect(options[value]);\n    } else if (isExistingSelection && props.onDeselect) {\n      props.onDeselect(options[value]);\n    }\n\n    RRSClassRef.updateState({\n      type: actionTypes.SET_MULTISELECT_OPTIONS,\n      value: nextPotentialSelectionIndex,\n    });\n  } else {\n    if (props.onSelect) {\n      props.onSelect(options[value]);\n    }\n\n    RRSClassRef.updateState({\n      type: actionTypes.SET_SINGLESELECT_OPTIONS,\n      value: nextPotentialSelectionIndex,\n    });\n  }\n\n  if (isOptionsPanelOpen) {\n    event.stopPropagation(); // Do not submit form\n  } else {\n    // tslint:disable-next-line\n    props.onSubmit && props.onSubmit(event); // Submit the form\n  }\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IState } from '../../types/';\n\ninterface TArgs {\n  state: IState;\n  RRSClassRef: Select;\n}\n\nexport function handleTouchStart({ state, RRSClassRef }: TArgs): void {\n  const { disabled } = state;\n\n  if (disabled) return;\n\n  /* initially it's assumed that the user is not dragging */\n  RRSClassRef.updateState({\n    type: actionTypes.SET_IS_DRAGGING,\n    value: false,\n  });\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IState } from '../../types/';\n\ninterface TArgs {\n  state: IState;\n  RRSClassRef: Select;\n}\n\nexport function handleTouchMove({ state, RRSClassRef }: TArgs): void {\n  /* if touchmove fired - User is dragging, this disables touchend/click */\n  const { isDragging, disabled } = state;\n\n  if (disabled) return;\n\n  if (!isDragging) {\n    RRSClassRef.updateState({\n      type: actionTypes.SET_IS_DRAGGING,\n      value: true,\n    });\n  }\n}\n","import * as actionTypes from '../../constants/actionTypes';\nimport { Select } from '../../react-responsive-select';\nimport { IProps, IState } from '../../types/';\nimport { multiSelectBroadcastChange, singleSelectBroadcastChange } from '../onChangeBroadcasters';\n\ninterface TArgs {\n  state: IState;\n  RRSClassRef: Select;\n  props: IProps;\n}\n\nexport function handleBlur({ state, RRSClassRef, props }: TArgs): void {\n  const { onBlur, multiselect } = props;\n  const { isOptionsPanelOpen, disabled, altered, singleSelectSelectedOption, multiSelectSelectedOptions } = state;\n\n  if (disabled) return;\n\n  const isOutsideSelectBox = RRSClassRef.selectBox && !RRSClassRef.selectBox.contains(document.activeElement);\n\n  /* Handle click outside of selectbox */\n  if (isOptionsPanelOpen && isOutsideSelectBox) {\n    RRSClassRef.updateState({\n      type: actionTypes.SET_OPTIONS_PANEL_CLOSED_ONBLUR,\n    });\n  }\n\n  if (isOutsideSelectBox && onBlur) {\n    if (multiselect) {\n      multiSelectBroadcastChange(multiSelectSelectedOptions.options, Boolean(altered), onBlur);\n    } else {\n      singleSelectBroadcastChange(singleSelectSelectedOption, Boolean(altered), onBlur);\n    }\n  }\n}\n","import * as React from 'react';\nimport { IProps, IState } from '../types/';\n\ninterface TArgs {\n  state: IState;\n  props: IProps;\n}\n\nexport function getCustomLabelText({ state, props }: TArgs): React.ReactNode {\n  const { multiselect, customLabelRenderer } = props;\n  const { multiSelectSelectedOptions, singleSelectSelectedOption } = state;\n\n  if (!customLabelRenderer) return false;\n\n  if (multiselect) {\n    return customLabelRenderer(multiSelectSelectedOptions);\n  }\n\n  return customLabelRenderer(singleSelectSelectedOption);\n}\n"],"names":["timeoutActive","SET_IS_DRAGGING","SET_OPTIONS_PANEL_OPEN","SET_NEXT_SELECTED_INDEX","SET_NEXT_SELECTED_INDEX_ALPHA_NUMERIC","stringMatch","skipCircularReference","cache","_key","value","indexOf","push","isEqual","a","b","JSON","stringify","multiSelectBroadcastChange","currOptions","altered","fn","prevOptions","values","options","map","currOption","name","text","singleSelectBroadcastChange","currValue","prevValue","containsClassName","element","classNameStr","String","className","split","handleClick","event","state","RRSClassRef","props","multiselect","multiSelectSelectedOptions","isOptionsPanelOpen","disabled","isDragging","preventDefault","target","parseFloat","getAttribute","optHeader","isExistingSelection","some","option","hasOwnProperty","onSelect","onDeselect","updateState","type","focusButton","actionTypes","newState","nextValidIndex","nextPotentialSelectionIndex","mode","possibleOptionIndexes","reduce","acc","index","indexNotFocusable","length","getNextIndex","handleKeyUpOrDownPressed","initialState","singleSelectInitialIndex","singleSelectSelectedIndex","singleSelectSelectedOption","multiSelectInitialSelectedIndexes","multiSelectSelectedIndexes","addMultiSelectIndex","addMultiSelectOption","getInitialMultiSelectOption","findClosestValidOption","getMultiSelectInitialSelectedOptions","selectedValues","selectedOptionsToReturn","noSelectionLabel","filter","selectedValue","possibleOptions","getSingleSelectSelectedOption","initialSelectedIndex","selectionIndex","closestValidOption","isAltered","mergeIsAlteredState","removeMultiSelectIndex","indexLocation","slice","removeMultiSelectOption","reducer","action","initialSelectedIndexes","emptyResult","result","selected","getMultiSelectSelectedValueIndexes","hasOptHeaders","isFirstOptionInListSelected","shouldDeselectFirstOptionAndSelectRequestedOption","resetMultiSelectState","actionOptionIndexAdjusted","nextState","MultiSelectOption","optionRef","React","scrollOffset","getScrollOffset","el","document","querySelector","Math","ceil","getBoundingClientRect","height","componentDidUpdate","this","optionsContainerRef","optHeaderLabel","current","focus","scrollDiff","top","scroll","floor","scrollTop","isDisabled","Boolean","render","isSelected","i","role","tabIndex","markup","textContent","ref","singleline","MultiSelect","optionsButton","optionsContainer","prevProps","selectBoxRef","contains","activeElement","getAriaLabel","prefix","selectedOptionsLength","join","caretIcon","customLabelText","id","v","key","_this2","SingleSelectOption","SingleSelect","getCustomLabel","getDefaultLabel","CheckboxIcon","xmlns","x","y","width","viewBox","points","Select","e","keyCodes","forEach","keyCode","test","setTimeout","foundIndexes","toLowerCase","handleAlphaNumerical","stopPropagation","onSubmit","handleEnterPressed","handleKeyEvent","_this","_e","onBlur","isOutsideSelectBox","selectBox","handleBlur","firstLoad","componentDidMount","_prevProps","prevState","onChange","callback","onListen","setState","actionType","customLabelRenderer","modalCloseButton","r","onKeyDown","onHandleKeyEvent","onTouchStart","onHandleTouchStart","onTouchMove","onHandleTouchMove","onTouchEnd","onHandleClick","onMouseDown","onHandleBlur","d","style","fill","marginRight"],"mappings":"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"}